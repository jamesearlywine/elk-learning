"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalLevel = exports.CdkConfig = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const internal_1 = require("./internal");
const component_1 = require("../component");
const json_1 = require("../json");
/**
 * Represents cdk.json file.
 */
class CdkConfig extends component_1.Component {
    constructor(project, options) {
        super(project);
        this.cdkout = options.cdkout ?? "cdk.out";
        this._include = options.watchIncludes ?? [];
        this._exclude = options.watchExcludes ?? [];
        const context = { ...options.context };
        const fflags = options.featureFlags ?? true;
        if (fflags) {
            for (const flag of internal_1.FEATURE_FLAGS) {
                context[flag] = true;
            }
        }
        this.json = new json_1.JsonFile(project, "cdk.json", {
            omitEmpty: true,
            obj: {
                app: options.app,
                context: context,
                requireApproval: options.requireApproval,
                output: this.cdkout,
                build: options.buildCommand,
                watch: {
                    include: () => this._include,
                    exclude: () => this._exclude,
                },
            },
        });
        project.gitignore.exclude(`/${this.cdkout}/`);
        project.gitignore.exclude(".cdk.staging/");
    }
    /**
     * Add includes to `cdk.json`.
     * @param patterns The includes to add.
     */
    addIncludes(...patterns) {
        this._include.push(...patterns);
    }
    /**
     * Add excludes to `cdk.json`.
     * @param patterns The excludes to add.
     */
    addExcludes(...patterns) {
        this._exclude.push(...patterns);
    }
    /**
     * List of glob patterns to be included by CDK.
     */
    get include() {
        return [...this._include];
    }
    /**
     * List of glob patterns to be excluded by CDK.
     */
    get exclude() {
        return [...this._exclude];
    }
}
exports.CdkConfig = CdkConfig;
_a = JSII_RTTI_SYMBOL_1;
CdkConfig[_a] = { fqn: "projen.awscdk.CdkConfig", version: "0.88.0" };
/**
 * Which approval is required when deploying CDK apps.
 */
var ApprovalLevel;
(function (ApprovalLevel) {
    /**
     * Approval is never required
     */
    ApprovalLevel["NEVER"] = "never";
    /**
     * Requires approval on any IAM or security-group-related change
     */
    ApprovalLevel["ANY_CHANGE"] = "any-change";
    /**
     * Requires approval when IAM statements or traffic rules are added; removals don't require approval
     */
    ApprovalLevel["BROADENING"] = "broadening";
})(ApprovalLevel || (exports.ApprovalLevel = ApprovalLevel = {}));
//# sourceMappingURL=data:application/json;base64,
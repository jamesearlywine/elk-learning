"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IgnoreFile = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const file_1 = require("./file");
const util_1 = require("./util");
class IgnoreFile extends file_1.FileBase {
    /**
     *
     * @param project The project to tie this file to.
     * @param filePath - the relative path in the project to put the file
     * @param minify - whether comments/blank lines should be filtered
     */
    constructor(project, filePath, options) {
        super(project, filePath, { editGitignore: filePath !== ".gitignore" });
        this.filterCommentLines = options?.filterCommentLines ?? true;
        this.filterEmptyLines = options?.filterEmptyLines ?? true;
        this._patterns = options?.ignorePatterns ?? [];
    }
    /**
     * Add ignore patterns. Files that match this pattern will be ignored. If the
     * pattern starts with a negation mark `!`, files that match will _not_ be
     * ignored.
     *
     * Comment lines (start with `#`) and blank lines ("") are filtered by default
     * but can be included using options specified when instantiating the component.
     *
     * @param patterns Ignore patterns.
     */
    addPatterns(...patterns) {
        for (const pattern of patterns) {
            const isComment = pattern.startsWith("#");
            const isEmptyLine = Boolean(pattern.trim().length === 0);
            if (isComment && this.filterCommentLines) {
                continue;
            }
            if (isEmptyLine && this.filterEmptyLines) {
                continue;
            }
            if (!isComment && !isEmptyLine) {
                this.normalizePatterns(pattern);
            }
            const normalizedPattern = (0, util_1.normalizePersistedPath)(pattern);
            this._patterns.push(normalizedPattern);
        }
    }
    normalizePatterns(pattern) {
        const opposite = pattern.startsWith("!") ? pattern.slice(1) : "!" + pattern;
        remove(this._patterns, pattern); // prevent duplicates
        remove(this._patterns, opposite);
        if (pattern.endsWith("/")) {
            const prefix = opposite;
            for (const p of [...this._patterns]) {
                if (p.startsWith(prefix)) {
                    remove(this._patterns, p);
                }
            }
        }
    }
    /**
     * Removes patterns previously added from the ignore file.
     *
     * If `addPattern()` is called after this, the pattern will be added again.
     *
     * @param patterns patters to remove.
     */
    removePatterns(...patterns) {
        for (const p of patterns) {
            remove(this._patterns, p);
        }
    }
    /**
     * Ignore the files that match these patterns.
     * @param patterns The patterns to match.
     */
    exclude(...patterns) {
        return this.addPatterns(...patterns);
    }
    /**
     * Always include the specified file patterns.
     * @param patterns Patterns to include in git commits.
     */
    include(...patterns) {
        for (let pattern of patterns) {
            if (!pattern.startsWith("!")) {
                pattern = "!" + pattern;
            }
            this.addPatterns(pattern);
        }
    }
    synthesizeContent(resolver) {
        const lines = [
            ...(this.marker ? [`# ${this.marker}`] : []),
            ...this._patterns,
        ];
        return `${resolver.resolve(lines).join("\n")}\n`;
    }
}
exports.IgnoreFile = IgnoreFile;
_a = JSII_RTTI_SYMBOL_1;
IgnoreFile[_a] = { fqn: "projen.IgnoreFile", version: "0.88.0" };
// O(n) hooray!
function remove(arr, value) {
    const idx = arr.indexOf(value);
    if (idx >= 0) {
        arr.splice(idx, 1);
    }
}
//# sourceMappingURL=data:application/json;base64,
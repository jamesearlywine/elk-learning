"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonPatch = exports.TestFailureBehavior = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// inspired by https://github.com/cdk8s-team/cdk8s-core/blob/2.x/src/json-patch.ts
// under Apache 2.0 license
const fast_json_patch_1 = require("fast-json-patch");
var TestFailureBehavior;
(function (TestFailureBehavior) {
    /**
     * Skip the current patch operation and continue with the next operation.
     */
    TestFailureBehavior["SKIP"] = "skip";
    /**
     * Fail the whole file synthesis.
     */
    TestFailureBehavior["FAIL_SYNTHESIS"] = "fail";
})(TestFailureBehavior || (exports.TestFailureBehavior = TestFailureBehavior = {}));
const TEST_FAILURE_BEHAVIOR_SYMBOL = Symbol.for("testFailureBehavior");
/**
 * Utility for applying RFC-6902 JSON-Patch to a document.
 *
 * Use the the `JsonPatch.apply(doc, ...ops)` function to apply a set of
 * operations to a JSON document and return the result.
 *
 * Operations can be created using the factory methods `JsonPatch.add()`,
 * `JsonPatch.remove()`, etc.
 *
 * @example
 *
 *const output = JsonPatch.apply(input,
 *  JsonPatch.replace('/world/hi/there', 'goodbye'),
 *  JsonPatch.add('/world/foo/', 'boom'),
 *  JsonPatch.remove('/hello'));
 *
 */
class JsonPatch {
    /**
     * Applies a set of JSON-Patch (RFC-6902) operations to `document` and returns the result.
     * @param document The document to patch
     * @param ops The operations to apply
     * @returns The result document
     */
    static apply(document, ...ops) {
        try {
            const result = (0, fast_json_patch_1.applyPatch)(document, (0, fast_json_patch_1.deepClone)(ops.map((o) => o._toJson())));
            return result.newDocument;
        }
        catch (e) {
            if (e instanceof fast_json_patch_1.JsonPatchError && e.name === "TEST_OPERATION_FAILED") {
                const op = ops[e.index];
                if (TEST_FAILURE_BEHAVIOR_SYMBOL in op) {
                    const failureBehavior = op[TEST_FAILURE_BEHAVIOR_SYMBOL];
                    if (failureBehavior === TestFailureBehavior.SKIP) {
                        return document;
                    }
                }
            }
            throw e;
        }
    }
    /**
     * Adds a value to an object or inserts it into an array. In the case of an
     * array, the value is inserted before the given index. The - character can be
     * used instead of an index to insert at the end of an array.
     *
     * @example JsonPatch.add('/biscuits/1', { "name": "Ginger Nut" })
     */
    static add(path, value) {
        return new JsonPatch({
            op: "add",
            path,
            value,
        });
    }
    /**
     * Removes a value from an object or array.
     *
     * @example JsonPatch.remove('/biscuits')
     * @example JsonPatch.remove('/biscuits/0')
     */
    static remove(path) {
        return new JsonPatch({ op: "remove", path });
    }
    /**
     * Replaces a value. Equivalent to a “remove” followed by an “add”.
     *
     * @example JsonPatch.replace('/biscuits/0/name', 'Chocolate Digestive')
     */
    static replace(path, value) {
        return new JsonPatch({
            op: "replace",
            path,
            value,
        });
    }
    /**
     * Copies a value from one location to another within the JSON document. Both
     * from and path are JSON Pointers.
     *
     * @example JsonPatch.copy('/biscuits/0', '/best_biscuit')
     */
    static copy(from, path) {
        return new JsonPatch({ op: "copy", from, path });
    }
    /**
     * Moves a value from one location to the other. Both from and path are JSON Pointers.
     *
     * @example JsonPatch.move('/biscuits', '/cookies')
     */
    static move(from, path) {
        return new JsonPatch({ op: "move", from, path });
    }
    /**
     * Tests that the specified value is set in the document. If the test fails,
     * then the patch as a whole should not apply.
     *
     * @example JsonPatch.test('/best_biscuit/name', 'Choco Leibniz')
     */
    static test(path, value, failureBehavior = TestFailureBehavior.SKIP) {
        const patch = new JsonPatch({
            op: "test",
            path,
            value,
        });
        Object.defineProperty(patch, TEST_FAILURE_BEHAVIOR_SYMBOL, {
            writable: false,
            value: failureBehavior,
        });
        return patch;
    }
    /**
     * Escapes a json pointer path
     * @param path The raw pointer
     * @return the Escaped path
     */
    static escapePath(path) {
        return (0, fast_json_patch_1.escapePathComponent)(path);
    }
    constructor(operation) {
        this.operation = operation;
    }
    /**
     * Returns the JSON representation of this JSON patch operation.
     *
     * @internal
     */
    _toJson() {
        return this.operation;
    }
}
exports.JsonPatch = JsonPatch;
_a = JSII_RTTI_SYMBOL_1;
JsonPatch[_a] = { fqn: "projen.JsonPatch", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
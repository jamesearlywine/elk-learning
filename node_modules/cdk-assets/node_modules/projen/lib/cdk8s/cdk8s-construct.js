"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructLibraryCdk8s = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const semver = require("semver");
const auto_discover_1 = require("./auto-discover");
const cdk_1 = require("../cdk");
/**
 * CDK8s construct library project
 *
 * A multi-language (jsii) construct library which vends constructs designed to
 * use within the CDK for Kubernetes (CDK8s), with a friendly workflow and
 * automatic publishing to the construct catalog.
 *
 * @pjid cdk8s-construct
 */
class ConstructLibraryCdk8s extends cdk_1.ConstructLibrary {
    constructor(options) {
        super(options);
        if (!options.cdk8sVersion) {
            throw new Error("Required field cdk8sVersion is not specified.");
        }
        const cdk8sVersion = semver.parse(options.cdk8sVersion);
        if (!cdk8sVersion) {
            throw new Error(`"cdk8sVersion" cannot be parsed as a semver version: ${options.cdk8sVersion}`);
        }
        this.cdk8sVersion = options.cdk8sVersionPinning
            ? options.cdk8sVersion
            : `^${options.cdk8sVersion}`;
        const defaultConstructsVersion = cdk8sVersion.major === 1 ? "3.3.196" : "10.0.0";
        const resolvedConstructsVersion = options.constructsVersion ?? defaultConstructsVersion;
        const resolvedMajorConstructVersion = semver.parse(resolvedConstructsVersion)?.major;
        if (!resolvedMajorConstructVersion) {
            throw new Error(`"constructsVersion" cannot be parsed as a semver version: ${options.constructsVersion}`);
        }
        switch (cdk8sVersion.major) {
            case 1:
                if (resolvedMajorConstructVersion !== 3) {
                    throw new Error("cdk8s 1.x requires constructs 3.x");
                }
                break;
            case 2:
                if (resolvedMajorConstructVersion !== 10) {
                    throw new Error("cdk8s 2.x requires constructs 10.x");
                }
                break;
        }
        this.constructsVersion = options.constructsVersionPinning
            ? resolvedConstructsVersion
            : `^${resolvedConstructsVersion}`;
        this.addPeerDeps(`constructs@${this.constructsVersion}`, `cdk8s@${this.cdk8sVersion}`);
        new auto_discover_1.AutoDiscover(this, {
            testdir: this.testdir,
            tsconfigPath: this.tsconfigDev.fileName,
            integrationTestAutoDiscover: options.integrationTestAutoDiscover ?? true,
        });
    }
}
exports.ConstructLibraryCdk8s = ConstructLibraryCdk8s;
_a = JSII_RTTI_SYMBOL_1;
ConstructLibraryCdk8s[_a] = { fqn: "projen.cdk8s.ConstructLibraryCdk8s", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
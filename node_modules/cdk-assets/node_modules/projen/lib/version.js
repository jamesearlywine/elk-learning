"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReleasableCommits = exports.Version = exports.CHANGES_SINCE_LAST_RELEASE = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path_1 = require("path");
const component_1 = require("./component");
const dependencies_1 = require("./dependencies");
const node_package_1 = require("./javascript/node-package");
/**
 * This command determines if there were any changes since the last release in a cross-platform compatible way.
 * It is used as a condition for both the `bump` and the `release` tasks.
 *
 * Explanation:
 *  - log commits                                               | git log
 *  - limit log output to a single line per commit              | --oneline
 *  - looks only at the most recent commit                      | -1
 *  - silent grep output                                        | grep -q
 *  - exits with code 0 if a match is found                     | grep -q "chore(release):"
 *  - exits with code 1 if a match is found (reverse-match)     | grep -qv "chore(release):"
 */
exports.CHANGES_SINCE_LAST_RELEASE = 'git log --oneline -1 | grep -qv "chore(release):"';
/**
 * The default package to be used for commit-and-tag-version
 */
const COMMIT_AND_TAG_VERSION_DEFAULT = "commit-and-tag-version@^12";
class Version extends component_1.Component {
    constructor(scope, options) {
        super(scope);
        this.changelogFileName = "changelog.md";
        this.versionFileName = "version.txt";
        this.releaseTagFileName = "releasetag.txt";
        this.bumpPackage = options.bumpPackage ?? COMMIT_AND_TAG_VERSION_DEFAULT;
        // This component is language independent.
        // However, when in the Node.js ecosystem, we can improve the experience by adding a dev dependency on the bump package.
        const node = node_package_1.NodePackage.of(this.project);
        if (node) {
            const { name: bumpName, version: bumpVersion } = dependencies_1.Dependencies.parseDependency(this.bumpPackage);
            if (!node.project.deps.isDependencySatisfied(bumpName, dependencies_1.DependencyType.BUILD, bumpVersion ?? "*")) {
                node.project.deps.addDependency(this.bumpPackage, dependencies_1.DependencyType.BUILD);
            }
        }
        const versionInputFile = options.versionInputFile;
        const changelogFile = path_1.posix.join(options.artifactsDirectory, this.changelogFileName);
        const bumpFile = path_1.posix.join(options.artifactsDirectory, this.versionFileName);
        const releaseTagFile = path_1.posix.join(options.artifactsDirectory, this.releaseTagFileName);
        const commonEnv = {
            OUTFILE: versionInputFile,
            CHANGELOG: changelogFile,
            BUMPFILE: bumpFile,
            RELEASETAG: releaseTagFile,
            RELEASE_TAG_PREFIX: options.tagPrefix ?? "",
            // doesn't work if custom configuration is long
            VERSIONRCOPTIONS: JSON.stringify(options.versionrcOptions),
            BUMP_PACKAGE: this.bumpPackage,
        };
        if (options.releasableCommits) {
            commonEnv.RELEASABLE_COMMITS = options.releasableCommits.cmd;
        }
        this.bumpTask = this.project.addTask("bump", {
            description: "Bumps version based on latest git tag and generates a changelog entry",
            condition: exports.CHANGES_SINCE_LAST_RELEASE,
            env: { ...commonEnv },
        });
        this.bumpTask.builtin("release/bump-version");
        this.unbumpTask = this.project.addTask("unbump", {
            description: "Restores version to 0.0.0",
            env: { ...commonEnv },
        });
        this.unbumpTask.builtin("release/reset-version");
        this.project.addGitIgnore(`/${changelogFile}`);
        this.project.addGitIgnore(`/${bumpFile}`);
        this.project.addPackageIgnore(`/${changelogFile}`);
        this.project.addPackageIgnore(`/${bumpFile}`);
    }
}
exports.Version = Version;
_a = JSII_RTTI_SYMBOL_1;
Version[_a] = { fqn: "projen.Version", version: "0.88.0" };
/**
 * @deprecated use `version.bumpPackage` on the component instance instead
 */
Version.STANDARD_VERSION = COMMIT_AND_TAG_VERSION_DEFAULT;
/**
 * Find commits that should be considered releasable to decide if a release is required.
 */
class ReleasableCommits {
    /**
     * Release every commit
     *
     * This will only not release if the most recent commit is tagged with the latest matching tag.
     *
     * @param path Consider only commits that are enough to explain how the files that match the specified paths came to be.
     * This path is relative to the current working dir of the `bump` task, i.e. to only consider commits of a subproject use `"."`.
     */
    static everyCommit(path) {
        const cmd = `git log --oneline $LATEST_TAG..HEAD`;
        return new ReleasableCommits(withPath(cmd, path));
    }
    /**
     * Limit commits by their conventional commit type
     *
     * This will only release commit that match one of the provided types.
     * Commits are required to follow the conventional commit spec and will be ignored otherwise.
     *
     * @param types List of conventional commit types that should be released
     * @param path Consider only commits that are enough to explain how the files that match the specified paths came to be.
     * This path is relative to the current working dir of the `bump` task, i.e. to only consider commits of a subproject use `"."`.
     */
    static ofType(types, path) {
        const allowedTypes = types.join("|");
        // @see: https://github.com/conventional-commits/parser/blob/eeefb961ebf5b9dfea0fea8b06f8ad34a1e439b9/lib/parser.js
        // -E requires this to be POSIX Extended Regular Expression, which comes with certain limitations
        // see https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions for details
        const cmd = `git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep "^(${allowedTypes}){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+"`;
        return new ReleasableCommits(withPath(cmd, path));
    }
    /**
     * Release only features and fixes
     *
     * Shorthand for `ReleasableCommits.onlyOfType(['feat', 'fix'])`.
     *
     * @param path Consider only commits that are enough to explain how the files that match the specified paths came to be.
     * This path is relative to the current working dir of the `bump` task, i.e. to only consider commits of a subproject use `"."`.
     */
    static featuresAndFixes(path) {
        return ReleasableCommits.ofType(["feat", "fix"], path);
    }
    /**
     * Use an arbitrary shell command to find releasable commits since the latest tag.
     *
     * A new release will be initiated, if the number of returned commits is greater than zero.
     * Must return a newline separate list of commits that should considered releasable.
     * `$LATEST_TAG` will be replaced with the actual latest tag for the given prefix.*
     *
     * @example "git log --oneline $LATEST_TAG..HEAD -- ."
     */
    static exec(cmd) {
        return new ReleasableCommits(cmd);
    }
    constructor(cmd) {
        this.cmd = cmd;
    }
}
exports.ReleasableCommits = ReleasableCommits;
_b = JSII_RTTI_SYMBOL_1;
ReleasableCommits[_b] = { fqn: "projen.ReleasableCommits", version: "0.88.0" };
/**
 * Append a path argument to a git command if one is provided
 */
function withPath(cmd, path) {
    if (path !== undefined) {
        return `${cmd} -- ${path}`;
    }
    return cmd;
}
//# sourceMappingURL=data:application/json;base64,
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleDir = exports.SampleFile = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("fs");
const path = require("path");
const glob = require("glob");
const component_1 = require("./component");
const util_1 = require("./util");
/**
 * Produces a file with the given contents but only once, if the file doesn't already exist.
 * Use this for creating example code files or other resources.
 */
class SampleFile extends component_1.Component {
    /**
     * Creates a new SampleFile object
     * @param project - the project to tie this file to.
     * @param filePath - the relative path in the project to put the file
     * @param options - the options for the file.
     */
    constructor(project, filePath, options) {
        super(project);
        if (options.contents && options.sourcePath) {
            throw new Error("Cannot specify both 'contents' and 'source' fields.");
        }
        if (!options.contents && !options.sourcePath) {
            throw new Error("Must specify at least one of 'contents' or 'source'.");
        }
        this.filePath = filePath;
        this.options = options;
    }
    synthesize() {
        let contents;
        if (this.options.contents) {
            contents = this.options.contents;
        }
        else if (this.options.sourcePath) {
            contents = fs.readFileSync(this.options.sourcePath);
        }
        this.writeOnceFileContents(this.project.outdir, this.filePath, contents ?? "");
    }
    /**
     * A helper function that will write the file once and return if it was written or not.
     * @param dir - the directory for the new file
     * @param filename - the filename for the new file
     * @param contents - the contents of the file to write
     * @return boolean - whether a new file was written or not.
     * @private
     */
    writeOnceFileContents(dir, filename, contents) {
        const fullFilename = path.join(dir, filename);
        if (fs.existsSync(fullFilename)) {
            return;
        }
        (0, util_1.writeFile)(fullFilename, contents, { readonly: false });
    }
}
exports.SampleFile = SampleFile;
_a = JSII_RTTI_SYMBOL_1;
SampleFile[_a] = { fqn: "projen.SampleFile", version: "0.88.0" };
/**
 * Renders the given files into the directory if the directory does not exist. Use this to create sample code files
 */
class SampleDir extends component_1.Component {
    /**
     * Create sample files in the given directory if the given directory does not exist
     * @param project Parent project to add files to.
     * @param dir directory to add files to. If directory already exists, nothing is added.
     * @param options options for which files to create.
     */
    constructor(project, dir, options) {
        super(project);
        if (!options.files && !options.sourceDir) {
            throw new Error("Must specify at least one of 'files' or 'source'.");
        }
        this.dir = dir;
        this.options = options;
    }
    synthesize() {
        const fullOutdir = path.join(this.project.outdir, this.dir);
        if (fs.existsSync(fullOutdir)) {
            return;
        }
        // previously creating the directory to allow empty dirs to be created
        fs.mkdirSync(fullOutdir, { recursive: true });
        if (this.options.sourceDir) {
            const basedir = this.options.sourceDir;
            const files = glob.sync("**", {
                cwd: basedir,
                nodir: true,
                dot: true,
            }); // returns relative file paths with POSIX separators
            for (const file of files) {
                const sourcePath = path.join(basedir, file);
                const targetPath = path.join(fullOutdir, file);
                fs.mkdirSync(path.dirname(targetPath), { recursive: true });
                fs.copyFileSync(sourcePath, targetPath);
                fs.chmodSync(targetPath, (0, util_1.getFilePermissions)({ readonly: false, executable: false }));
            }
        }
        for (const filename in this.options.files) {
            (0, util_1.writeFile)(path.join(fullOutdir, filename), this.options.files[filename]);
        }
    }
}
exports.SampleDir = SampleDir;
_b = JSII_RTTI_SYMBOL_1;
SampleDir[_b] = { fqn: "projen.SampleDir", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
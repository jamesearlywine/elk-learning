"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitAttributesFile = exports.EndOfLine = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const file_1 = require("./file");
/**
 * The end of line characters supported by git.
 */
var EndOfLine;
(function (EndOfLine) {
    /**
     * Maintain existing (mixed values within one file are normalised by looking
     * at what's used after the first line)
     */
    EndOfLine["AUTO"] = "auto";
    /**
     * Carriage Return + Line Feed characters (\r\n), common on Windows
     */
    EndOfLine["CRLF"] = "crlf";
    /**
     * Line Feed only (\n), common on Linux and macOS as well as inside git repos
     */
    EndOfLine["LF"] = "lf";
    /**
     * Disable and do not configure the end of line character
     */
    EndOfLine["NONE"] = "none";
})(EndOfLine || (exports.EndOfLine = EndOfLine = {}));
/**
 * Assign attributes to file names in a git repository.
 *
 * @see https://git-scm.com/docs/gitattributes
 */
class GitAttributesFile extends file_1.FileBase {
    constructor(scope, options) {
        super(scope, ".gitattributes", {
            editGitignore: false,
        });
        this.attributes = new Map();
        this.endOfLine = options?.endOfLine ?? EndOfLine.LF;
        if (this.endOfLine != EndOfLine.NONE) {
            let endOfLineAttributes = [`text=auto`];
            if (this.endOfLine != EndOfLine.AUTO) {
                endOfLineAttributes.push(`eol=${this.endOfLine}`);
            }
            // Setting a default end of line for all text files in the repository
            // This line should be the first one in order to use it as a default for text files and allow for overriding in later lines
            this.addAttributes("*", ...endOfLineAttributes);
        }
    }
    /**
     * Maps a set of attributes to a set of files.
     * @param glob Glob pattern to match files in the repo
     * @param attributes Attributes to assign to these files.
     */
    addAttributes(glob, ...attributes) {
        if (!this.attributes.has(glob)) {
            this.attributes.set(glob, new Set());
        }
        const set = this.attributes.get(glob);
        for (const attribute of attributes) {
            set.add(attribute);
        }
    }
    /**
     * Add attributes necessary to mark these files as stored in LFS
     */
    addLfsPattern(glob) {
        this.addAttributes(glob, "filter=lfs", "diff=lfs", "merge=lfs", "-text");
    }
    /**
     * Whether the current gitattributes file has any LFS patterns
     */
    get hasLfsPatterns() {
        return Array.from(this.attributes.values()).some((attrs) => attrs.has("filter=lfs"));
    }
    preSynthesize() {
        this.project.addPackageIgnore("/.gitattributes");
        super.preSynthesize();
    }
    synthesizeContent(_) {
        // We can assume the file map is never empty.
        const entries = Array.from(this.attributes.entries()).sort(([l], [r]) => l.localeCompare(r));
        if (entries.length === 0) {
            return undefined;
        }
        return [
            ...(this.marker ? [`# ${this.marker}`] : []),
            "",
            ...entries.map(([name, attributes]) => `${name} ${Array.from(attributes).join(" ")}`),
        ].join("\n");
    }
}
exports.GitAttributesFile = GitAttributesFile;
_a = JSII_RTTI_SYMBOL_1;
GitAttributesFile[_a] = { fqn: "projen.GitAttributesFile", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
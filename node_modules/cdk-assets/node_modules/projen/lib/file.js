"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs_1 = require("fs");
const path = require("path");
const _resolve_1 = require("./_resolve");
const common_1 = require("./common");
const component_1 = require("./component");
const projenrc_1 = require("./projenrc");
const util_1 = require("./util");
const constructs_1 = require("./util/constructs");
class FileBase extends component_1.Component {
    /**
     * The projen marker, used to identify files as projen-generated.
     *
     * Value is undefined if the project is being ejected.
     */
    get marker() {
        if (this.project.ejected || !this.shouldAddMarker) {
            return undefined;
        }
        // `marker` is empty if project is being ejected or if explicitly disabled
        const projenrc = projenrc_1.ProjenrcFile.of(this.project)?.filePath ?? common_1.DEFAULT_PROJEN_RC_JS_FILENAME;
        return `${common_1.PROJEN_MARKER}. To modify, edit ${projenrc} and run "${this.project.projenCommand}".`;
    }
    constructor(scope, filePath, options = {}) {
        const project = (0, constructs_1.findClosestProject)(scope);
        const root = project.root;
        const normalizedPath = path.normalize(filePath);
        const projectPath = (0, util_1.normalizePersistedPath)(normalizedPath);
        const absolutePath = path.resolve(project.outdir, projectPath);
        const relativeProjectPath = path.relative(root.outdir, absolutePath);
        const rootProjectPath = (0, util_1.normalizePersistedPath)(relativeProjectPath);
        const autoId = `${new.target.name}@${projectPath}`;
        // Before actually creating the file, ensure the file path is unique within the full project tree
        // This is required because projects can create files inside their subprojects
        if (root.tryFindFile(absolutePath) || scope.node.tryFindChild(autoId)) {
            throw new Error(`There is already a file under ${rootProjectPath}`);
        }
        super(scope, autoId);
        this.node.addMetadata("type", "file");
        this.node.addMetadata("path", rootProjectPath);
        this.readonly = !project.ejected && (options.readonly ?? true);
        this.executable = options.executable ?? false;
        this.path = projectPath;
        this.absolutePath = absolutePath;
        this.shouldAddMarker = options.marker ?? true;
        const globPattern = `/${this.path}`;
        const committed = options.committed ?? project.commitGenerated ?? true;
        if (committed && filePath !== ".gitattributes") {
            project.annotateGenerated(`/${filePath}`);
        }
        const editGitignore = options.editGitignore ?? true;
        if (editGitignore) {
            this.project.addGitIgnore(`${committed ? "!" : ""}${globPattern}`);
        }
        else {
            if (options.committed != null) {
                throw new Error('"gitignore" is disabled, so it does not make sense to specify "committed"');
            }
        }
    }
    /**
     * Writes the file to the project's output directory
     */
    synthesize() {
        const outdir = this.project.outdir;
        const filePath = path.join(outdir, this.path);
        const resolver = {
            resolve: (obj, options) => (0, _resolve_1.resolve)(obj, options),
        };
        const content = this.synthesizeContent(resolver);
        if (content === undefined) {
            // remove file (if exists) and skip rest of synthesis
            (0, fs_1.rmSync)(filePath, { force: true, recursive: true });
            return;
        }
        // check if the file was changed.
        const prev = (0, util_1.tryReadFileSync)(filePath);
        const prevReadonly = !(0, util_1.isWritable)(filePath);
        const successfulExecutableAssertion = (0, util_1.assertExecutablePermissions)(filePath, this.executable);
        if (prev !== undefined &&
            content === prev &&
            prevReadonly === this.readonly &&
            successfulExecutableAssertion) {
            this.project.logger.debug(`no change in ${filePath}`);
            this._changed = false;
            return;
        }
        (0, util_1.writeFile)(filePath, content, {
            readonly: this.readonly,
            executable: this.executable,
        });
        this.checkForProjenMarker();
        this._changed = true;
    }
    /**
     * For debugging, check whether a file was incorrectly generated with
     * or without the projen marker. The projen marker does not *need* to be
     * included on projen-generated files, but it's recommended since it signals
     * that it probably should not be edited directly.
     */
    checkForProjenMarker() {
        const filePath = path.join(this.project.outdir, this.path);
        const contents = (0, util_1.tryReadFileSync)(filePath);
        const containsMarker = contents?.includes(common_1.PROJEN_MARKER);
        if (this.marker && !containsMarker) {
            this.project.logger.debug(`note: expected ${this.path} to contain marker but found none.`);
        }
        else if (!this.marker && containsMarker) {
            this.project.logger.debug(`note: expected ${this.path} to not contain marker but found one anyway.`);
        }
    }
    /**
     * Indicates if the file has been changed during synthesis. This property is
     * only available in `postSynthesize()` hooks. If this is `undefined`, the
     * file has not been synthesized yet.
     */
    get changed() {
        return this._changed;
    }
}
exports.FileBase = FileBase;
_a = JSII_RTTI_SYMBOL_1;
FileBase[_a] = { fqn: "projen.FileBase", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
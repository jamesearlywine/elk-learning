"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BundleLogLevel = exports.Charset = exports.SourceMapMode = exports.RunBundleTask = exports.Bundler = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const path_1 = require("path");
const util_1 = require("./util");
const component_1 = require("../component");
const dependencies_1 = require("../dependencies");
/**
 * Adds support for bundling JavaScript applications and dependencies into a
 * single file. In the future, this will also supports bundling websites.
 */
class Bundler extends component_1.Component {
    /**
     * Returns the `Bundler` instance associated with a project or `undefined` if
     * there is no Bundler.
     * @param project The project
     * @returns A bundler
     */
    static of(project) {
        const isBundler = (o) => o instanceof Bundler;
        return project.components.find(isBundler);
    }
    /**
     * Creates a `Bundler`.
     */
    constructor(project, options = {}) {
        super(project);
        this.esbuildVersion = options.esbuildVersion;
        this.bundledir = options.assetsDir ?? "assets";
        this.loaders = options.loaders;
        this.runBundleTask =
            options.runBundleTask ??
                (options.addToPreCompile === false
                    ? RunBundleTask.MANUAL
                    : RunBundleTask.PRE_COMPILE);
    }
    /**
     * Gets or creates the singleton "bundle" task of the project.
     *
     * If the project doesn't have a "bundle" task, it will be created and spawned
     * during the pre-compile phase.
     */
    get bundleTask() {
        if (!this._task) {
            this.addBundlingSupport();
            this._task = this.project.tasks.addTask("bundle", {
                description: "Prepare assets",
            });
            // install the bundle task into the pre-compile phase.
            if (this.runBundleTask === RunBundleTask.PRE_COMPILE) {
                this.project.preCompileTask.spawn(this._task);
            }
            else if (this.runBundleTask === RunBundleTask.POST_COMPILE) {
                this.project.postCompileTask.spawn(this._task);
            }
        }
        return this._task;
    }
    /**
     * Adds a task to the project which bundles a specific entrypoint and all of
     * its dependencies into a single javascript output file.
     *
     * @param entrypoint The relative path of the artifact within the project
     * @param options Bundling options
     */
    addBundle(entrypoint, options) {
        const name = (0, util_1.renderBundleName)(entrypoint);
        const outdir = path.posix.join(this.bundledir, name);
        const outfile = path.posix.join(outdir, options.outfile ?? "index.js");
        const args = [
            "esbuild",
            "--bundle",
            entrypoint,
            `--target="${options.target}"`,
            `--platform="${options.platform}"`,
            `--outfile="${outfile}"`,
        ];
        if (options.tsconfigPath) {
            args.push(`--tsconfig="${options.tsconfigPath}"`);
        }
        for (const x of options.externals ?? []) {
            args.push(`--external:${x}`);
        }
        if (options.sourcemap || options.sourceMapMode) {
            const sourceMapMode = options.sourceMapMode ?? SourceMapMode.DEFAULT;
            const sourceMapValue = sourceMapMode === SourceMapMode.DEFAULT
                ? ""
                : `=${options.sourceMapMode}`;
            args.push(`--sourcemap${sourceMapValue}`);
            if (options.sourcesContent === true) {
                args.push(`--sources-content=${options.sourcesContent}`);
            }
        }
        const format = options.format;
        if (format) {
            args.push(`--format=${format}`);
        }
        const loaders = options.loaders ?? false ? options.loaders : this.loaders ?? false;
        if (loaders) {
            for (let [extension, loader] of Object.entries(loaders)) {
                args.push(`--loader:.${extension}=${loader}`);
            }
        }
        const defines = Object.entries(options.define ?? {});
        for (const [key, value] of defines) {
            args.push(`--define:${key}=${JSON.stringify(value)}`);
        }
        if (options.minify) {
            args.push("--minify");
        }
        if (options.logLevel) {
            args.push(`--log-level=${options.logLevel}`);
        }
        if (options.keepNames) {
            args.push("--keep-names");
        }
        if (options.metafile) {
            args.push(`--metafile=${(0, path_1.join)(outdir, "index.meta.json")}`);
        }
        if (options.banner) {
            args.push(`--banner:js=${JSON.stringify(options.banner)}`);
        }
        if (options.footer) {
            args.push(`--footer:js=${JSON.stringify(options.footer)}`);
        }
        if (options.mainFields) {
            args.push(`--main-fields=${options.mainFields.join(",")}`);
        }
        if (options.inject) {
            args.push(...options.inject.map((i) => `--inject:${i}`));
        }
        if (options.esbuildArgs) {
            const subArgs = new Array();
            for (const [key, value] of Object.entries(options.esbuildArgs)) {
                if (value === true || value === "") {
                    subArgs.push(key);
                }
                else if (value) {
                    subArgs.push(`${key}="${value}"`);
                }
            }
            args.push(subArgs.join(" "));
        }
        const bundleTask = this.project.addTask(`bundle:${name}`, {
            description: `Create a JavaScript bundle from ${entrypoint}`,
            exec: args.join(" "),
        });
        this.bundleTask.spawn(bundleTask);
        if (options.executable ?? false) {
            bundleTask.exec(`chmod +x ${outfile}`);
        }
        let watchTask;
        const watch = options.watchTask ?? true;
        if (watch) {
            watchTask = this.project.addTask(`bundle:${name}:watch`, {
                description: `Continuously update the JavaScript bundle from ${entrypoint}`,
                exec: `${args.join(" ")} --watch`,
            });
        }
        return {
            bundleTask: bundleTask,
            watchTask: watchTask,
            outdir: outdir,
            outfile: outfile,
        };
    }
    /**
     * Add bundling support to a project. This is called implicitly when
     * `bundleTask` is referenced first. It adds the dependency on `esbuild`,
     * gitignore/npmignore, etc.
     */
    addBundlingSupport() {
        const ignoreEntry = `/${this.bundledir}/`;
        this.project.addGitIgnore(ignoreEntry);
        this.project.addPackageIgnore(`!${ignoreEntry}`); // include in tarball
        const dep = this.esbuildVersion
            ? `esbuild@${this.esbuildVersion}`
            : "esbuild";
        this.project.deps.addDependency(dep, dependencies_1.DependencyType.BUILD);
    }
}
exports.Bundler = Bundler;
_a = JSII_RTTI_SYMBOL_1;
Bundler[_a] = { fqn: "projen.javascript.Bundler", version: "0.88.0" };
/**
 * Options for BundlerOptions.runBundleTask
 */
var RunBundleTask;
(function (RunBundleTask) {
    /**
     * Don't bundle automatically as part of the build.
     */
    RunBundleTask["MANUAL"] = "manual";
    /**
     * Bundle automatically before compilation.
     */
    RunBundleTask["PRE_COMPILE"] = "pre_compile";
    /**
     * Bundle automatically after compilation. This is useful if you want to
     * bundle the compiled results.
     *
     * Thus will run compilation tasks (using tsc, etc.) before running file
     * through bundling step.
     *
     * This is only required unless you are using new experimental features that
     * are not supported by `esbuild` but are supported by typescript's `tsc`
     * compiler. One example of such feature is `emitDecoratorMetadata`.
     *
     * ```typescript
     * // In a TypeScript project with output configured
     * // to go to the "lib" directory:
     * const project = new TypeScriptProject({
     *   name: "test",
     *   defaultReleaseBranch: "main",
     *   tsconfig: {
     *     compilerOptions: {
     *       outDir: "lib",
     *     },
     *   },
     *   bundlerOptions: {
     *     // ensure we compile with `tsc` before bundling
     *     runBundleTask: RunBundleTask.POST_COMPILE,
     *   },
     * });
     *
     * // Tell the bundler to bundle the compiled results (from the "lib" directory)
     * project.bundler.addBundle("./lib/index.js", {
     *   platform: "node",
     *   target: "node18",
     *   sourcemap: false,
     *   format: "esm",
     * });
     * ```
     **/
    RunBundleTask["POST_COMPILE"] = "post_compile";
})(RunBundleTask || (exports.RunBundleTask = RunBundleTask = {}));
/**
 * SourceMap mode for esbuild
 * @see https://esbuild.github.io/api/#sourcemap
 */
var SourceMapMode;
(function (SourceMapMode) {
    /**
     * Default sourceMap mode - will generate a .js.map file alongside any generated .js file and add a special //# sourceMappingURL=
     * comment to the bottom of the .js file pointing to the .js.map file
     */
    SourceMapMode["DEFAULT"] = "default";
    /**
     *  External sourceMap mode - If you want to omit the special //# sourceMappingURL= comment from the generated .js file but you still
     *  want to generate the .js.map files
     */
    SourceMapMode["EXTERNAL"] = "external";
    /**
     * Inline sourceMap mode - If you want to insert the entire source map into the .js file instead of generating a separate .js.map file
     */
    SourceMapMode["INLINE"] = "inline";
    /**
     * Both sourceMap mode - If you want to have the effect of both inline and external simultaneously
     */
    SourceMapMode["BOTH"] = "both";
})(SourceMapMode || (exports.SourceMapMode = SourceMapMode = {}));
/**
 * Charset for esbuild's output
 */
var Charset;
(function (Charset) {
    /**
     * ASCII
     *
     * Any non-ASCII characters are escaped using backslash escape sequences
     */
    Charset["ASCII"] = "ascii";
    /**
     * UTF-8
     *
     * Keep original characters without using escape sequences
     */
    Charset["UTF8"] = "utf8";
})(Charset || (exports.Charset = Charset = {}));
/**
 * Log levels for esbuild and package managers' install commands.
 */
var BundleLogLevel;
(function (BundleLogLevel) {
    /** Show everything */
    BundleLogLevel["VERBOSE"] = "verbose";
    /** Show everything from info and some additional messages for debugging */
    BundleLogLevel["DEBUG"] = "debug";
    /** Show warnings, errors, and an output file summary */
    BundleLogLevel["INFO"] = "info";
    /** Show warnings and errors */
    BundleLogLevel["WARNING"] = "warning";
    /** Show errors only */
    BundleLogLevel["ERROR"] = "error";
    /** Show nothing */
    BundleLogLevel["SILENT"] = "silent";
})(BundleLogLevel || (exports.BundleLogLevel = BundleLogLevel = {}));
//# sourceMappingURL=data:application/json;base64,
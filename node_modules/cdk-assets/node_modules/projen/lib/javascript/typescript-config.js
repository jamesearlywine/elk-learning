"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypescriptConfig = exports.TypescriptConfigExtends = exports.TypeScriptJsxMode = exports.TypeScriptImportsNotUsedAsValues = exports.TypeScriptModuleDetection = exports.TypeScriptModuleResolution = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const semver = require("semver");
const _1 = require(".");
const component_1 = require("../component");
const json_1 = require("../json");
const util_1 = require("../util");
/**
 * Determines how modules get resolved.
 *
 * @see https://www.typescriptlang.org/docs/handbook/module-resolution.html
 */
var TypeScriptModuleResolution;
(function (TypeScriptModuleResolution) {
    /**
     * TypeScript's former default resolution strategy.
     *
     * @see https://www.typescriptlang.org/docs/handbook/module-resolution.html#classic
     */
    TypeScriptModuleResolution["CLASSIC"] = "classic";
    /**
     * Resolution strategy which attempts to mimic the Node.js module resolution strategy at runtime.
     *
     * @see https://www.typescriptlang.org/docs/handbook/module-resolution.html#node
     */
    TypeScriptModuleResolution["NODE"] = "node";
    /**
     * `--moduleResolution node` was renamed to `node10`
     * (keeping `node` as an alias for backward compatibility) in TypeScript 5.0.
     * It reflects the CommonJS module resolution algorithm as it existed in Node.js versions
     * earlier than v12. It should no longer be used.
     *
     * @see https://www.typescriptlang.org/docs/handbook/modules/reference.html#node10-formerly-known-as-node
     */
    TypeScriptModuleResolution["NODE10"] = "node10";
    /**
     * Node.js’ ECMAScript Module Support from TypeScript 4.7 onwards
     *
     * @see https://www.typescriptlang.org/tsconfig#moduleResolution
     */
    TypeScriptModuleResolution["NODE16"] = "node16";
    /**
     * Node.js’ ECMAScript Module Support from TypeScript 4.7 onwards
     *
     * @see https://www.typescriptlang.org/tsconfig#moduleResolution
     */
    TypeScriptModuleResolution["NODE_NEXT"] = "nodenext";
    /**
     * Resolution strategy which attempts to mimic resolution patterns of modern bundlers; from TypeScript 5.0 onwards.
     *
     * @see https://www.typescriptlang.org/tsconfig#moduleResolution
     */
    TypeScriptModuleResolution["BUNDLER"] = "bundler";
})(TypeScriptModuleResolution || (exports.TypeScriptModuleResolution = TypeScriptModuleResolution = {}));
/**
 * This setting controls how TypeScript determines whether a file is a script or a module.
 *
 * @see https://www.typescriptlang.org/docs/handbook/modules/theory.html#scripts-and-modules-in-javascript
 */
var TypeScriptModuleDetection;
(function (TypeScriptModuleDetection) {
    /**
     * TypeScript will not only look for import and export statements, but it will also check whether the "type" field in a package.json is set to "module" when running with module: nodenext or node16, and check whether the current file is a JSX file when running under jsx: react-jsx.
     *
     * @see https://www.typescriptlang.org/tsconfig/#moduleDetection
     */
    TypeScriptModuleDetection["AUTO"] = "auto";
    /**
     * The same behavior as 4.6 and prior, usings import and export statements to determine whether a file is a module.
     *
     * @see https://www.typescriptlang.org/tsconfig/#moduleDetection
     */
    TypeScriptModuleDetection["LEGACY"] = "legacy";
    /**
     * Ensures that every non-declaration file is treated as a module.
     *
     * @see https://www.typescriptlang.org/tsconfig/#moduleDetection
     */
    TypeScriptModuleDetection["FORCE"] = "force";
})(TypeScriptModuleDetection || (exports.TypeScriptModuleDetection = TypeScriptModuleDetection = {}));
/**
 * This flag controls how `import` works, there are 3 different options.
 *
 * @see https://www.typescriptlang.org/tsconfig#importsNotUsedAsValues
 */
var TypeScriptImportsNotUsedAsValues;
(function (TypeScriptImportsNotUsedAsValues) {
    /**
     * The default behavior of dropping `import` statements which only reference types.
     */
    TypeScriptImportsNotUsedAsValues["REMOVE"] = "remove";
    /**
     * Preserves all `import` statements whose values or types are never used. This can cause imports/side-effects to be preserved.
     */
    TypeScriptImportsNotUsedAsValues["PRESERVE"] = "preserve";
    /**
     * This preserves all imports (the same as the preserve option), but will error when a value import is only used as a type.
     * This might be useful if you want to ensure no values are being accidentally imported, but still make side-effect imports explicit.
     */
    TypeScriptImportsNotUsedAsValues["ERROR"] = "error";
})(TypeScriptImportsNotUsedAsValues || (exports.TypeScriptImportsNotUsedAsValues = TypeScriptImportsNotUsedAsValues = {}));
/**
 * Determines how JSX should get transformed into valid JavaScript.
 *
 * @see https://www.typescriptlang.org/docs/handbook/jsx.html
 */
var TypeScriptJsxMode;
(function (TypeScriptJsxMode) {
    /**
     * Keeps the JSX as part of the output to be further consumed by another transform step (e.g. Babel).
     */
    TypeScriptJsxMode["PRESERVE"] = "preserve";
    /**
     * Converts JSX syntax into React.createElement, does not need to go through a JSX transformation before use, and the output will have a .js file extension.
     */
    TypeScriptJsxMode["REACT"] = "react";
    /**
     * Keeps all JSX like 'preserve' mode, but output will have a .js extension.
     */
    TypeScriptJsxMode["REACT_NATIVE"] = "react-native";
    /**
     * Passes `key` separately from props and always passes `children` as props (since React 17).
     *
     * @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#react-17-jsx-factories
     */
    TypeScriptJsxMode["REACT_JSX"] = "react-jsx";
    /**
     * Same as `REACT_JSX` with additional debug data.
     */
    TypeScriptJsxMode["REACT_JSXDEV"] = "react-jsxdev";
})(TypeScriptJsxMode || (exports.TypeScriptJsxMode = TypeScriptJsxMode = {}));
/**
 * Container for `TypescriptConfig` `tsconfig.json` base configuration(s).
 * Extending from more than one base config file requires TypeScript 5.0+.
 */
class TypescriptConfigExtends {
    /**
     * Factory for creation from array of file paths.
     *
     * @remarks
     * TypeScript 5.0+ is required to specify more than one value in `paths`.
     *
     * @param paths Absolute or relative paths to base `tsconfig.json` files.
     */
    static fromPaths(paths) {
        return new TypescriptConfigExtends(paths);
    }
    /**
     * Factory for creation from array of other `TypescriptConfig` instances.
     *
     * @remarks
     * TypeScript 5.0+ is required to specify more than on value in `configs`.
     *
     * @param configs Base `TypescriptConfig` instances.
     */
    static fromTypescriptConfigs(configs) {
        const paths = configs.map((config) => config.file.absolutePath);
        return TypescriptConfigExtends.fromPaths(paths);
    }
    constructor(bases) {
        this.bases = bases;
    }
    toJSON() {
        return this.bases;
    }
}
exports.TypescriptConfigExtends = TypescriptConfigExtends;
_a = JSII_RTTI_SYMBOL_1;
TypescriptConfigExtends[_a] = { fqn: "projen.javascript.TypescriptConfigExtends", version: "0.88.0" };
class TypescriptConfig extends component_1.Component {
    constructor(project, options) {
        super(project);
        const fileName = options.fileName ?? "tsconfig.json";
        if (!options.extends && !options.compilerOptions) {
            throw new Error("TypescriptConfig: Must provide either `extends` or `compilerOptions` (or both).");
        }
        this._extends = options.extends ?? TypescriptConfigExtends.fromPaths([]);
        this.includeSet = options.include
            ? new Set(options.include)
            : new Set(["**/*.ts"]);
        this.excludeSet = options.exclude
            ? new Set(options.exclude)
            : new Set(["node_modules"]);
        this.fileName = fileName;
        this.compilerOptions = options.compilerOptions;
        this.file = new json_1.JsonFile(project, fileName, {
            allowComments: true,
            obj: {
                extends: () => this.renderExtends(),
                compilerOptions: this.compilerOptions,
                include: () => this.include,
                exclude: () => this.exclude,
            },
        });
        if (project instanceof _1.NodeProject) {
            project.npmignore?.exclude(`/${fileName}`);
        }
    }
    get include() {
        return [...this.includeSet];
    }
    get exclude() {
        return [...this.excludeSet];
    }
    /**
     * Render appropriate value for `extends` field.
     * @private
     */
    renderExtends() {
        if (this.extends.length <= 1) {
            // render string value when only one extension (TS<5.0);
            // omit if no extensions.
            return this.extends[0];
        }
        // render many extensions as array (TS>=5.0)
        return this.extends;
    }
    /**
     * Resolve valid TypeScript extends paths relative to this config.
     *
     * @remarks
     * This will only resolve the relative path from this config to another given
     * an absolute path as input. Any non-absolute path or other string will be returned as is.
     * This is to preserve manually specified relative paths as well as npm import paths.
     *
     * @param configPath Path to resolve against.
     */
    resolveExtendsPath(configPath) {
        // if not absolute assume user-defined path (or npm package).
        if (!path.isAbsolute(configPath))
            return configPath;
        const relativeConfig = path.relative(path.dirname(this.file.absolutePath), configPath);
        // ensure immediate sibling files are prefixed with './'
        // typescript figures this out, but some tools seemingly break without it (i.e, eslint).
        const { dir, ...pathParts } = path.parse(relativeConfig);
        const configDir = dir
            ? path.format({ dir: dir.startsWith("..") ? "" : ".", base: dir })
            : ".";
        const extendsPath = path.format({ ...pathParts, dir: configDir });
        return (0, util_1.normalizePersistedPath)(extendsPath);
    }
    /**
     * Validate usage of `extends` against current TypeScript version.
     * @private
     */
    validateExtends() {
        const project = this.project;
        const hasOneOrNoneExtends = this.extends.length <= 1;
        const isNodeProject = project instanceof _1.NodeProject;
        if (hasOneOrNoneExtends || !isNodeProject) {
            // always accept no extends or singular extends.
            return;
        }
        const tsVersion = semver.coerce(project.package.tryResolveDependencyVersion("typescript"), { loose: true });
        if (tsVersion && tsVersion.major < 5) {
            this.project.logger.warn("TypeScript < 5.0.0 can only extend from a single base config.", `TypeScript Version: ${tsVersion.format()}`, `File: ${this.file.absolutePath}`, `Extends: ${this.extends}`);
        }
    }
    /**
     * Array of base `tsconfig.json` paths.
     * Any absolute paths are resolved relative to this instance,
     * while any relative paths are used as is.
     */
    get extends() {
        return this._extends
            .toJSON()
            .map((value) => this.resolveExtendsPath(value));
    }
    /**
     * Extend from base `TypescriptConfig` instance.
     *
     * @remarks
     * TypeScript 5.0+ is required to extend from more than one base `TypescriptConfig`.
     *
     * @param value Base `TypescriptConfig` instance.
     */
    addExtends(value) {
        this._extends = TypescriptConfigExtends.fromPaths([
            ...this._extends.toJSON(),
            value.file.absolutePath,
        ]);
    }
    /**
     * Add an include pattern to the `include` array of the TSConfig.
     *
     * @see https://www.typescriptlang.org/tsconfig#include
     *
     * @param pattern The pattern to add.
     */
    addInclude(pattern) {
        this.include.push(pattern);
        this.includeSet.add(pattern);
    }
    /**
     * Add an exclude pattern to the `exclude` array of the TSConfig.
     *
     * @see https://www.typescriptlang.org/tsconfig#exclude
     *
     * @param pattern The pattern to add.
     */
    addExclude(pattern) {
        this.exclude.push(pattern);
        this.excludeSet.add(pattern);
    }
    /**
     * Remove an include pattern from the `include` array of the TSConfig.
     *
     * @see https://www.typescriptlang.org/tsconfig#include
     *
     * @param pattern The pattern to remove.
     */
    removeInclude(pattern) {
        this.includeSet.delete(pattern);
    }
    /**
     * Remove an exclude pattern from the `exclude` array of the TSConfig.
     *
     * @see https://www.typescriptlang.org/tsconfig#exclude
     *
     * @param pattern The pattern to remove.
     */
    removeExclude(pattern) {
        this.excludeSet.delete(pattern);
    }
    preSynthesize() {
        super.preSynthesize();
        this.validateExtends();
    }
}
exports.TypescriptConfig = TypescriptConfig;
_b = JSII_RTTI_SYMBOL_1;
TypescriptConfig[_b] = { fqn: "projen.javascript.TypescriptConfig", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
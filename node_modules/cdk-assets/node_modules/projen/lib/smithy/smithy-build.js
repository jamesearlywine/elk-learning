"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmithyBuild = void 0;
const component_1 = require("../component");
const json_1 = require("../json");
/**
 * Smithy build configuration options
 * @see https://smithy.io/2.0/guides/building-models/build-config.html
 */
class SmithyBuild extends component_1.Component {
    constructor(project, options = {}) {
        super(project);
        this.version = options.version ?? "1.0";
        this.outputDirectory = options.outputDirectory;
        this._imports = options.imports;
        this._projections = options.projections;
        this._plugins = options.plugins;
        this.ignoreMissingPlugins = options.ignoreMissingPlugins;
        this._maven = options.maven;
        this._sources = options.sources;
        this.manifest = {
            version: this.version,
            outputDirectory: this.outputDirectory,
            imports: () => this._imports,
            projections: () => this._projections,
            plugins: () => this._plugins,
            ignoreMissingPlugins: this.ignoreMissingPlugins,
            maven: () => this._maven,
            sources: () => this._sources,
        };
        new json_1.JsonFile(this.project, "smithy-build.json", {
            obj: this.manifest,
            readonly: true, // we want "yarn add" to work and we have anti-tamper
            newline: false, // when file is edited by npm/yarn it doesn't include a newline
        });
    }
    /**
     * Get configured projections
     */
    get projections() {
        return this._projections ? { ...this._projections } : undefined;
    }
    /**
     * Get configured imports
     */
    get imports() {
        return this._imports ? [...this._imports] : undefined;
    }
    /**
     * Get configured plugins
     */
    get plugins() {
        return this._plugins ? { ...this._plugins } : undefined;
    }
    /**
     * Add a smithy build import
     */
    addImport(imp) {
        this._imports ? this._imports.push(imp) : (this._imports = [`${imp}`]);
    }
    /**
     * Add smithy build projections
     */
    addProjections(projections) {
        for (const [k, v] of Object.entries(projections)) {
            this._projections
                ? (this._projections[k] = v)
                : (this._projections = { [k]: v });
        }
    }
    /**
     * Add smithy build plugins
     */
    addPlugins(plugins) {
        for (const [k, v] of Object.entries(plugins)) {
            this._plugins ? (this._plugins[k] = v) : (this._plugins = { [k]: v });
        }
    }
    /**
     * Add maven dependencies to the smithy build for the vs-code plugin
     */
    addMavenDependencies(...dependencies) {
        this._maven = {
            dependencies: [...(this._maven?.dependencies ?? []), ...dependencies],
            repositories: this._maven?.repositories ?? [],
        };
    }
    /**
     * Add maven repositories to the smithy build for the vs-code plugin
     */
    addMavenRepositories(...repositories) {
        this._maven = {
            dependencies: this._maven?.dependencies ?? [],
            repositories: [...(this._maven?.repositories ?? []), ...repositories],
        };
    }
    /**
     * Add relative paths to model source files or directories
     */
    addSources(...sources) {
        this._sources
            ? this._sources.push(...sources)
            : (this._sources = [...sources]);
    }
}
exports.SmithyBuild = SmithyBuild;
//# sourceMappingURL=data:application/json;base64,
"use strict";
// @see https://circleci.com/docs/2.0/configuration-reference
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineParameterType = exports.JobWhen = exports.ResourceClass = exports.JobType = void 0;
/**
 * A job may have a type of approval indicating it must be manually approved before downstream jobs may proceed
 * @see https://circleci.com/docs/2.0/configuration-reference/#type
 */
var JobType;
(function (JobType) {
    JobType["APPROVAL"] = "approval";
})(JobType || (exports.JobType = JobType = {}));
/**
 * The resource_class feature allows configuring CPU and RAM resources for each job.
 * Different resource classes are available for different executors, as described in the tables below.
 * @see https://circleci.com/docs/2.0/configuration-reference/#resourceclass
 */
var ResourceClass;
(function (ResourceClass) {
    ResourceClass["SMALL"] = "small";
    ResourceClass["MEDIUM"] = "medium";
    ResourceClass["MEDIUM_PLUS"] = "medium+";
    ResourceClass["LARGE_X"] = "xlarge";
    ResourceClass["LARGE_2X"] = "2xlarge";
    ResourceClass["LARGE_2X_PLUS"] = "2xlarge+";
})(ResourceClass || (exports.ResourceClass = ResourceClass = {}));
/**
 * Specify when to enable or disable the step.
 * @see https://circleci.com/docs/2.0/configuration-reference/#steps
 */
var JobWhen;
(function (JobWhen) {
    JobWhen["ALWAYS"] = "always";
    JobWhen["ON_SUCCESS"] = "on_success";
    JobWhen["ON_FAIL"] = "on_fail";
})(JobWhen || (exports.JobWhen = JobWhen = {}));
/**
 * Pipeline parameter types
 * @see https://circleci.com/docs/2.0/reusing-config#parameter-syntax
 */
var PipelineParameterType;
(function (PipelineParameterType) {
    PipelineParameterType["STRING"] = "string";
    PipelineParameterType["BOOLEAN"] = "boolean";
    PipelineParameterType["INTEGER"] = "integer";
    PipelineParameterType["ENUM"] = "enum";
})(PipelineParameterType || (exports.PipelineParameterType = PipelineParameterType = {}));
//# sourceMappingURL=data:application/json;base64,
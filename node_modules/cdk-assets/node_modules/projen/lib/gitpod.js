"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gitpod = exports.GitpodPortVisibility = exports.GitpodOnOpen = exports.GitpodOpenIn = exports.GitpodOpenMode = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("./component");
const yaml_1 = require("./yaml");
/**
 * Relative path of Gitpod file to generate
 */
const GITPOD_FILE = ".gitpod.yml";
/**
 * https://www.gitpod.io/docs/configuration/
 * https://www.gitpod.io/docs/config-start-tasks/
 * https://www.gitpod.io/docs/prebuilds/#configure-the-github-app
 * https://www.gitpod.io/docs/vscode-extensions/
 */
/**
 * Configure how the terminal should be opened relative to the previous task.
 */
var GitpodOpenMode;
(function (GitpodOpenMode) {
    /**
     * Opens in the same tab group right after the previous tab
     */
    GitpodOpenMode["TAB_AFTER"] = "tab-after";
    /**
     * Opens in the same tab group left before the previous tab
     */
    GitpodOpenMode["TAB_BEFORE"] = "tab-before";
    /**
     * Splits and adds the terminal to the right
     */
    GitpodOpenMode["SPLIT_RIGHT"] = "split-right";
    /**
     * Splits and adds the terminal to the left
     */
    GitpodOpenMode["SPLIT_LEFT"] = "split-left";
    /**
     * Splits and adds the terminal to the top
     */
    GitpodOpenMode["SPLIT_TOP"] = "split-top";
    /**
     * Splits and adds the terminal to the bottom
     */
    GitpodOpenMode["SPLIT_BOTTOM"] = "split-bottom";
})(GitpodOpenMode || (exports.GitpodOpenMode = GitpodOpenMode = {}));
/**
 * Configure where in the IDE the terminal should be opened.
 */
var GitpodOpenIn;
(function (GitpodOpenIn) {
    /**
     * the bottom panel (default)
     */
    GitpodOpenIn["BOTTOM"] = "bottom";
    /**
     * the left panel
     */
    GitpodOpenIn["LEFT"] = "left";
    /**
     * the right panel
     */
    GitpodOpenIn["RIGHT"] = "right";
    /**
     * the main editor area
     */
    GitpodOpenIn["MAIN"] = "main";
})(GitpodOpenIn || (exports.GitpodOpenIn = GitpodOpenIn = {}));
/**
 * What to do when a service on a port is detected.
 */
var GitpodOnOpen;
(function (GitpodOnOpen) {
    /**
     * Open a new browser tab
     */
    GitpodOnOpen["OPEN_BROWSER"] = "open-browser";
    /**
     * Open a preview on the right side of the IDE
     */
    GitpodOnOpen["OPEN_PREVIEW"] = "open-preview";
    /**
     * Show a notification asking the user what to do (default)
     */
    GitpodOnOpen["NOTIFY"] = "notify";
    /**
     * Do nothing.
     */
    GitpodOnOpen["IGNORE"] = "ignore";
})(GitpodOnOpen || (exports.GitpodOnOpen = GitpodOnOpen = {}));
/**
 * Whether the port visibility should be private or public
 */
var GitpodPortVisibility;
(function (GitpodPortVisibility) {
    /**
     * Allows everyone with the port URL to access the port (default)
     */
    GitpodPortVisibility["PUBLIC"] = "public";
    /**
     * Only allows users with workspace access to access the port
     */
    GitpodPortVisibility["PRIVATE"] = "private";
})(GitpodPortVisibility || (exports.GitpodPortVisibility = GitpodPortVisibility = {}));
/**
 * The Gitpod component which emits .gitpod.yml
 */
class Gitpod extends component_1.Component {
    constructor(project, options = {}) {
        super(project);
        this.tasks = new Array();
        this.ports = new Array();
        this.vscodeExtensions = new Array();
        this.dockerImage = options?.dockerImage;
        if (options?.tasks) {
            for (const task of options.tasks) {
                this.addTasks(task);
            }
        }
        if (options?.prebuilds) {
            this.addPrebuilds(options.prebuilds);
        }
        if (options?.ports) {
            this.addPorts(...options.ports);
        }
        if (options?.vscodeExtensions) {
            this.addVscodeExtensions(...options.vscodeExtensions);
        }
        this.config = {
            image: () => this.renderDockerImage(),
            tasks: this.tasks,
            github: () => this.renderPrebuilds(),
            ports: this.ports,
            vscode: {
                extensions: this.vscodeExtensions,
            },
        };
        new yaml_1.YamlFile(this.project, GITPOD_FILE, {
            obj: this.config,
            omitEmpty: true,
            // GitPod needs to read the file from the repository in order to work.
            committed: true,
        });
    }
    /**
     * Add a custom Docker image or Dockerfile for the container.
     *
     * @param image The Docker image
     */
    addDockerImage(image) {
        if (this.dockerImage) {
            throw new Error("dockerImage cannot be redefined.");
        }
        this.dockerImage = image;
    }
    /**
     * Add tasks to run when gitpod starts.
     *
     * By default, all tasks will be run in parallel. To run tasks in sequence,
     * create a new `Task` and specify the other tasks as subtasks.
     *
     * @param tasks The new tasks
     */
    addTasks(...tasks) {
        this.tasks.push(...tasks.map((task) => ({
            name: task.name,
            command: `npx projen ${task.name}`,
        })));
    }
    /**
     * Add a prebuilds configuration for the Gitpod App
     * @param config The configuration
     */
    addPrebuilds(config) {
        this.prebuilds = config;
    }
    /**
     * Add a task with more granular options.
     *
     * By default, all tasks will be run in parallel. To run tasks in sequence,
     * create a new `Task` and set the other tasks as subtasks.
     *
     * @param options The task parameters
     */
    addCustomTask(options) {
        this.tasks.push({
            name: options.name,
            command: options.command,
            openMode: options.openMode,
            openIn: options.openIn,
            before: options.before,
            init: options.init,
            prebuild: options.prebuild,
        });
    }
    /**
     * Add ports that should be exposed (forwarded) from the container.
     *
     * @param ports The new ports
     */
    addPorts(...ports) {
        this.ports.push(...ports.map((port) => ({ port: port })));
    }
    /**
     * Add a list of VSCode extensions that should be automatically installed
     * in the container.
     *
     * These must be in the format defined in the Open VSX registry.
     * @example 'scala-lang.scala@0.3.9:O5XmjwY5Gz+0oDZAmqneJw=='
     * @see https://www.gitpod.io/docs/vscode-extensions/
     *
     * @param extensions The extension IDs
     */
    addVscodeExtensions(...extensions) {
        this.vscodeExtensions.push(...extensions);
    }
    renderDockerImage() {
        if (this.dockerImage?.image) {
            return this.dockerImage.image;
        }
        else if (this.dockerImage?.dockerFile) {
            return {
                file: this.dockerImage.dockerFile,
            };
        }
        else {
            return undefined;
        }
    }
    renderPrebuilds() {
        if (this.prebuilds) {
            return {
                prebuilds: this.prebuilds,
            };
        }
        else {
            return undefined;
        }
    }
}
exports.Gitpod = Gitpod;
_a = JSII_RTTI_SYMBOL_1;
Gitpod[_a] = { fqn: "projen.Gitpod", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
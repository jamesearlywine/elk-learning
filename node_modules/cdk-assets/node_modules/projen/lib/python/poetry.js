"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoetryPyproject = exports.Poetry = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const TOML = require("@iarna/toml");
const component_1 = require("../component");
const dependencies_1 = require("../dependencies");
const task_runtime_1 = require("../task-runtime");
const toml_1 = require("../toml");
const util_1 = require("../util");
/**
 * Manage project dependencies, virtual environments, and packaging through the
 * poetry CLI tool.
 */
class Poetry extends component_1.Component {
    constructor(project, options) {
        super(project);
        this.pythonExec = options.pythonExec ?? "python";
        this.installTask = project.addTask("install", {
            description: "Install dependencies and update lockfile",
            exec: "poetry update",
        });
        this.installCiTask = project.addTask("install:ci", {
            description: "Install dependencies with frozen lockfile",
            exec: "poetry check --lock && poetry install",
        });
        this.project.tasks.addEnvironment("VIRTUAL_ENV", 
        // Create .venv on the first run if it doesn't already exist
        "$(poetry env info -p || poetry run poetry env info -p)");
        this.project.tasks.addEnvironment("PATH", "$(echo $(poetry env info -p)/bin:$PATH)");
        project.packageTask.exec("poetry build");
        this.publishTestTask = project.addTask("publish:test", {
            description: "Uploads the package against a test PyPI endpoint.",
            exec: "poetry publish -r testpypi",
        });
        this.publishTask = project.addTask("publish", {
            description: "Uploads the package to PyPI.",
            exec: "poetry publish",
        });
        this.pyProject = new PoetryPyproject(project, {
            name: project.name,
            version: options.version,
            description: options.description ?? "",
            license: options.license,
            authors: [`${options.authorName} <${options.authorEmail}>`],
            homepage: options.homepage,
            classifiers: options.classifiers,
            ...options.poetryOptions,
            dependencies: () => this.synthDependencies(),
            devDependencies: () => this.synthDevDependencies(),
        });
        new toml_1.TomlFile(project, "poetry.toml", {
            committed: false,
            obj: {
                repositories: {
                    testpypi: {
                        url: "https://test.pypi.org/legacy/",
                    },
                },
            },
        });
    }
    synthDependencies() {
        const dependencies = {};
        let pythonDefined = false;
        for (const pkg of this.project.deps.all) {
            if (pkg.name === "python") {
                pythonDefined = true;
            }
            if (pkg.type === dependencies_1.DependencyType.RUNTIME) {
                dependencies[pkg.name] = pkg.version ?? "*";
            }
        }
        if (!pythonDefined) {
            // Python version must be defined for poetry projects. Default to ^3.8.
            dependencies.python = "^3.8";
        }
        return this.permitDepsWithTomlInlineTables(dependencies);
    }
    synthDevDependencies() {
        const dependencies = {};
        for (const pkg of this.project.deps.all) {
            if ([dependencies_1.DependencyType.DEVENV, dependencies_1.DependencyType.TEST].includes(pkg.type)) {
                dependencies[pkg.name] = pkg.version ?? "*";
            }
        }
        return this.permitDepsWithTomlInlineTables(dependencies);
    }
    /**
     * Parses dependency values that may include TOML inline tables, converting them into JavaScript objects.
     * If a dependency value cannot be parsed as a TOML inline table (indicating it is a plain SemVer string),
     * it is left unchanged. This allows to support the full range of Poetry's dependency specification.
     * @see https://python-poetry.org/docs/dependency-specification/
     * @see https://toml.io/en/v1.0.0#inline-table
     *
     * @example
     * // Given a `dependencies` object like this:
     * const dependencies = {
     *   "mypackage": "{ version = '1.2.3', extras = ['extra1', 'extra2'] }",
     *   "anotherpackage": "^2.3.4"
     * };
     * // After parsing, the resulting object would be:
     * {
     *   "mypackage": {
     *     version: "1.2.3",
     *     extras: ["extra1", "extra2"]
     *   },
     *   "anotherpackage": "^2.3.4"
     * }
     * // Note: The value of `anotherpackage` remains unchanged as it is a plain SemVer string.
     *
     * @param dependencies An object where each key is a dependency name and each value is a string that might be
     * either a SemVer string or a TOML inline table string.
     * @returns A new object where each key is a dependency name and each value is either the original SemVer string
     * or the parsed JavaScript object representation of the TOML inline table.
     */
    permitDepsWithTomlInlineTables(dependencies) {
        const parseTomlInlineTable = (dependencyValue) => {
            try {
                // Attempt parsing the `dependencyValue` as a TOML inline table
                return TOML.parse(`dependencyKey = ${dependencyValue}`).dependencyKey;
            }
            catch {
                // If parsing fails, treat the `dependencyValue` as a plain SemVer string
                return dependencyValue;
            }
        };
        return Object.fromEntries(Object.entries(dependencies).map(([dependencyKey, dependencyValue]) => {
            return [dependencyKey, parseTomlInlineTable(dependencyValue)];
        }));
    }
    /**
     * Adds a runtime dependency.
     *
     * @param spec Format `<module>@<semver>`
     */
    addDependency(spec) {
        this.project.deps.addDependency(spec, dependencies_1.DependencyType.RUNTIME);
    }
    /**
     * Adds a dev dependency.
     *
     * @param spec Format `<module>@<semver>`
     */
    addDevDependency(spec) {
        this.project.deps.addDependency(spec, dependencies_1.DependencyType.DEVENV);
    }
    /**
     * Initializes the virtual environment if it doesn't exist (called during post-synthesis).
     */
    setupEnvironment() {
        const result = (0, util_1.execOrUndefined)("which poetry", {
            cwd: this.project.outdir,
        });
        if (!result) {
            this.project.logger.info("Unable to setup an environment since poetry is not installed. Please install poetry (https://python-poetry.org/docs/) or use a different component for managing environments such as 'venv'.");
        }
        let envPath = (0, util_1.execOrUndefined)("poetry env info -p", {
            cwd: this.project.outdir,
        });
        if (!envPath) {
            this.project.logger.info("Setting up a virtual environment...");
            (0, util_1.exec)(`poetry env use ${this.pythonExec}`, { cwd: this.project.outdir });
            envPath = (0, util_1.execOrUndefined)("poetry env info -p", {
                cwd: this.project.outdir,
            });
            this.project.logger.info(`Environment successfully created (located in ${envPath}}).`);
        }
    }
    /**
     * Installs dependencies (called during post-synthesis).
     */
    installDependencies() {
        this.project.logger.info("Installing dependencies...");
        const runtime = new task_runtime_1.TaskRuntime(this.project.outdir);
        // If the pyproject.toml file has changed, update the lockfile prior to installation
        if (this.pyProject.file.changed) {
            runtime.runTask(this.installTask.name);
        }
        else {
            runtime.runTask(this.installCiTask.name);
        }
    }
}
exports.Poetry = Poetry;
_a = JSII_RTTI_SYMBOL_1;
Poetry[_a] = { fqn: "projen.python.Poetry", version: "0.88.0" };
/**
 * Represents configuration of a pyproject.toml file for a Poetry project.
 *
 * @see https://python-poetry.org/docs/pyproject/
 */
class PoetryPyproject extends component_1.Component {
    constructor(project, options) {
        super(project);
        const { dependencies, devDependencies, ...otherOptions } = options;
        const decamelizedOptions = (0, util_1.decamelizeKeysRecursively)(otherOptions);
        const tomlStructure = {
            tool: {
                poetry: {
                    ...decamelizedOptions,
                    dependencies: dependencies,
                    group: {
                        dev: {
                            dependencies: devDependencies,
                        },
                    },
                },
            },
            "build-system": {
                requires: ["poetry-core"],
                "build-backend": "poetry.core.masonry.api",
            },
        };
        this.file = new toml_1.TomlFile(project, "pyproject.toml", {
            omitEmpty: false,
            obj: tomlStructure,
        });
    }
}
exports.PoetryPyproject = PoetryPyproject;
_b = JSII_RTTI_SYMBOL_1;
PoetryPyproject[_b] = { fqn: "projen.python.PoetryPyproject", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsiiProject = exports.Stability = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const semver_1 = require("semver");
const consts_1 = require("./consts");
const jsii_docgen_1 = require("./jsii-docgen");
const consts_2 = require("../build/private/consts");
const workflow_steps_1 = require("../github/workflow-steps");
const workflows_model_1 = require("../github/workflows-model");
const javascript_1 = require("../javascript");
const runner_options_1 = require("../runner-options");
const typescript_1 = require("../typescript");
const util_1 = require("../util");
const EMAIL_REGEX = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/;
const URL_REGEX = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/;
const REPO_TEMP_DIRECTORY = ".repo";
const BUILD_ARTIFACT_OLD_DIR = "dist.old";
var Stability;
(function (Stability) {
    Stability["EXPERIMENTAL"] = "experimental";
    Stability["STABLE"] = "stable";
    Stability["DEPRECATED"] = "deprecated";
})(Stability || (exports.Stability = Stability = {}));
/**
 * Multi-language jsii library project
 *
 * @pjid jsii
 */
class JsiiProject extends typescript_1.TypeScriptProject {
    constructor(options) {
        const { authorEmail, authorUrl } = parseAuthorAddress(options);
        // True if jsii version 1.x is compatible with the requested version range.
        const usesLegacyJsii = options.jsiiVersion == null ||
            (options.jsiiVersion !== "*" &&
                new semver_1.Range(options.jsiiVersion).intersects(new semver_1.Range("1.x")));
        const defaultOptions = {
            repository: options.repositoryUrl,
            authorName: options.author,
            authorEmail,
            authorUrl,
            jestOptions: usesLegacyJsii ? { jestVersion: "^27" } : undefined,
        };
        const forcedOptions = {
            releaseToNpm: false, // we have a jsii release workflow
            disableTsconfig: true, // jsii generates its own tsconfig.json
            docgen: false, // we use jsii-docgen here so disable typescript docgen
        };
        const mergedOptions = (0, util_1.deepMerge)([
            defaultOptions,
            options,
            forcedOptions,
        ]);
        super(mergedOptions);
        const srcdir = this.srcdir;
        const libdir = this.libdir;
        this.addFields({ types: `${libdir}/index.d.ts` });
        const compressAssembly = options.compressAssembly ?? false;
        // this is an unhelpful warning
        const jsiiFlags = ["--silence-warnings=reserved-word"];
        if (compressAssembly) {
            jsiiFlags.push("--compress-assembly");
        }
        const compatIgnore = options.compatIgnore ?? ".compatignore";
        this.addFields({ stability: options.stability ?? Stability.STABLE });
        if (options.stability === Stability.DEPRECATED) {
            this.addFields({ deprecated: true });
        }
        const compatTask = this.addTask("compat", {
            description: "Perform API compatibility check against latest version",
            exec: `jsii-diff npm:$(node -p "require(\'./package.json\').name") -k --ignore-file ${compatIgnore} || (echo "\nUNEXPECTED BREAKING CHANGES: add keys such as \'removed:constructs.Node.of\' to ${compatIgnore} to skip.\n" && exit 1)`,
        });
        const compat = options.compat ?? false;
        if (compat) {
            this.compileTask.spawn(compatTask);
        }
        this.compileTask.reset(["jsii", ...jsiiFlags].join(" "));
        this.watchTask.reset(["jsii", "-w", ...jsiiFlags].join(" "));
        // Create a new package:all task, it will be filled with language targets later
        this.packageAllTask = this.addTask("package-all", {
            description: "Packages artifacts for all target languages",
        });
        // in jsii we consider the entire repo (post build) as the build artifact
        // which is then used to create the language bindings in separate jobs.
        // we achieve this by doing a checkout and overwrite with the files from the js package.
        this.packageJsTask = this.addPackagingTask("js");
        // When running inside CI we initially only package js. Other targets are packaged in separate jobs.
        // Outside of CI (i.e locally) we simply package all targets.
        this.packageTask.reset();
        this.packageTask.spawn(this.packageJsTask, {
            // Only run in CI
            condition: `node -e "if (!process.env.CI) process.exit(1)"`,
        });
        this.packageTask.spawn(this.packageAllTask, {
            // Don't run in CI
            condition: `node -e "if (process.env.CI) process.exit(1)"`,
        });
        const targets = {};
        const jsii = {
            outdir: this.artifactsDirectory,
            targets,
            tsc: {
                outDir: libdir,
                rootDir: srcdir,
            },
        };
        if (options.excludeTypescript) {
            jsii.excludeTypescript = options.excludeTypescript;
        }
        this.addFields({ jsii });
        const extraJobOptions = {
            ...this.getJobRunsOnConfig(options),
            ...(options.workflowContainerImage
                ? { container: { image: options.workflowContainerImage } }
                : {}),
        };
        if (options.releaseToNpm != false) {
            const npmjs = {
                registry: this.package.npmRegistry,
                npmTokenSecret: this.package.npmTokenSecret,
                npmProvenance: this.package.npmProvenance,
                codeArtifactOptions: options.codeArtifactOptions,
            };
            this.addTargetToBuild("js", this.packageJsTask, extraJobOptions);
            this.addTargetToRelease("js", this.packageJsTask, npmjs);
        }
        // we cannot call an option `java` because the java code generated by jsii
        // does not compile due to a conflict between this option name and the `java`
        // package (e.g. when `java.util.Objects` is referenced).
        if ("java" in options) {
            throw new Error('the "java" option is now called "publishToMaven"');
        }
        const maven = options.publishToMaven;
        if (maven) {
            targets.java = {
                package: maven.javaPackage,
                maven: {
                    groupId: maven.mavenGroupId,
                    artifactId: maven.mavenArtifactId,
                },
            };
            const task = this.addPackagingTask("java");
            this.addTargetToBuild("java", task, extraJobOptions);
            this.addTargetToRelease("java", task, maven);
        }
        const pypi = options.publishToPypi ?? options.python;
        if (pypi) {
            targets.python = {
                distName: pypi.distName,
                module: pypi.module,
            };
            const task = this.addPackagingTask("python");
            this.addTargetToBuild("python", task, extraJobOptions);
            this.addTargetToRelease("python", task, pypi);
        }
        const nuget = options.publishToNuget ?? options.dotnet;
        if (nuget) {
            targets.dotnet = {
                namespace: nuget.dotNetNamespace,
                packageId: nuget.packageId,
                iconUrl: nuget.iconUrl,
            };
            const task = this.addPackagingTask("dotnet");
            this.addTargetToBuild("dotnet", task, extraJobOptions);
            this.addTargetToRelease("dotnet", task, nuget);
        }
        const golang = options.publishToGo;
        if (golang) {
            targets.go = {
                moduleName: golang.moduleName,
                packageName: golang.packageName,
                versionSuffix: golang.versionSuffix,
            };
            const task = this.addPackagingTask("go");
            this.addTargetToBuild("go", task, extraJobOptions);
            this.addTargetToRelease("go", task, golang);
        }
        const jsiiSuffix = options.jsiiVersion === "*"
            ? // If jsiiVersion is "*", don't specify anything so the user can manage.
                ""
            : // Otherwise, use `jsiiVersion` or fall back to `1.x`.
                `@${options.jsiiVersion ?? "1.x"}`;
        this.addDevDeps(`jsii${jsiiSuffix}`, `jsii-rosetta${jsiiSuffix}`, "jsii-diff", "jsii-pacmak");
        this.gitignore.exclude(".jsii", "tsconfig.json");
        this.npmignore?.include(".jsii");
        if (options.docgen ?? true) {
            // If jsiiVersion is "*", don't specify anything so the user can manage.
            // Otherwise use a version that is compatible with all supported jsii releases.
            const docgenVersion = options.jsiiVersion === "*" ? "*" : "^10.5.0";
            new jsii_docgen_1.JsiiDocgen(this, {
                version: docgenVersion,
                filePath: options.docgenFilePath,
            });
        }
        // jsii updates .npmignore, so we make it writable
        if (this.npmignore) {
            this.npmignore.readonly = false;
        }
        // When using jsii@1.x, we need to add some resolutions to avoid including
        // TypeScript-3.9-incompatible dependencies that break the compiler.
        if (usesLegacyJsii) {
            // https://github.com/projen/projen/issues/2165
            this.package.addPackageResolutions("@types/prettier@2.6.0");
            // https://github.com/projen/projen/issues/2264
            this.package.addPackageResolutions("@types/babel__traverse@7.18.2");
            const jsiiVersion = options.jsiiVersion ?? "1.x";
            if (jsiiVersion.startsWith("1.")) {
                const majorNodeVersion = (0, semver_1.major)(this.package.minNodeVersion ?? "16.0.0");
                // see https://github.com/projen/projen/issues/3324
                const nodeTypesVersionRange = (majorVersion) => {
                    switch (majorVersion) {
                        case 16:
                            return `^16 <= 16.18.78`;
                        case 18:
                            return `^18 <= 18.11.19`;
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                            this.logger.warn(`jsii@${jsiiVersion} and @types/node@^${majorVersion} are incompatible. Falling back to @types/node@^18.`, "Please upgrade to a modern version of jsii.");
                            return `^18 <= 18.11.19`;
                        default:
                            return `^${majorVersion}`;
                    }
                };
                this.addDevDeps(
                // https://github.com/projen/projen/pull/3076
                `@types/node@${nodeTypesVersionRange(majorNodeVersion)}`);
            }
        }
    }
    /**
     * Adds a target language to the release workflow.
     * @param language
     * @returns
     */
    addTargetToRelease(language, packTask, target) {
        if (!this.release) {
            return;
        }
        const pacmak = this.pacmakForLanguage(language, packTask);
        const prePublishSteps = [
            ...pacmak.bootstrapSteps,
            workflow_steps_1.WorkflowSteps.checkout({
                with: {
                    path: REPO_TEMP_DIRECTORY,
                    ...(this.github?.downloadLfs ? { lfs: true } : {}),
                },
            }),
            ...pacmak.packagingSteps,
        ];
        const commonPublishOptions = {
            publishTools: pacmak.publishTools,
            prePublishSteps,
        };
        const handler = publishTo[language];
        this.release?.publisher[handler]({
            ...commonPublishOptions,
            ...target,
        });
    }
    /**
     * Adds a target language to the build workflow
     * @param language
     * @returns
     */
    addTargetToBuild(language, packTask, extraJobOptions) {
        if (!this.buildWorkflow) {
            return;
        }
        const pacmak = this.pacmakForLanguage(language, packTask);
        this.buildWorkflow.addPostBuildJob(`package-${language}`, {
            ...(0, runner_options_1.filteredRunsOnOptions)(extraJobOptions.runsOn, extraJobOptions.runsOnGroup),
            permissions: {
                contents: workflows_model_1.JobPermission.READ,
            },
            tools: {
                node: { version: this.nodeVersion ?? "lts/*" },
                ...pacmak.publishTools,
            },
            steps: [
                ...pacmak.bootstrapSteps,
                workflow_steps_1.WorkflowSteps.checkout({
                    with: {
                        path: REPO_TEMP_DIRECTORY,
                        ref: consts_2.PULL_REQUEST_REF,
                        repository: consts_2.PULL_REQUEST_REPOSITORY,
                        ...(this.github?.downloadLfs ? { lfs: true } : {}),
                    },
                }),
                ...pacmak.packagingSteps,
            ],
            ...extraJobOptions,
        });
    }
    addPackagingTask(language) {
        const packageTargetTask = this.tasks.addTask(`package:${language}`, {
            description: `Create ${language} language bindings`,
        });
        const commandParts = ["jsii-pacmak", "-v"];
        if (this.package.packageManager === javascript_1.NodePackageManager.PNPM) {
            commandParts.push("--pack-command 'pnpm pack'");
        }
        commandParts.push(`--target ${language}`);
        packageTargetTask.exec(commandParts.join(" "));
        this.packageAllTask.spawn(packageTargetTask);
        return packageTargetTask;
    }
    pacmakForLanguage(target, packTask) {
        const bootstrapSteps = [];
        const packagingSteps = [];
        // Generic bootstrapping for all target languages
        bootstrapSteps.push(...this.workflowBootstrapSteps);
        if (this.package.packageManager === javascript_1.NodePackageManager.PNPM) {
            bootstrapSteps.push({
                name: "Setup pnpm",
                uses: "pnpm/action-setup@v3",
                with: { version: this.package.pnpmVersion },
            });
        }
        else if (this.package.packageManager === javascript_1.NodePackageManager.BUN) {
            bootstrapSteps.push({
                name: "Setup bun",
                uses: "oven-sh/setup-bun@v1",
            });
        }
        // Installation steps before packaging, but after checkout
        packagingSteps.push({
            name: "Install Dependencies",
            run: `cd ${REPO_TEMP_DIRECTORY} && ${this.package.installCommand}`,
        }, {
            name: "Extract build artifact",
            run: `tar --strip-components=1 -xzvf ${this.artifactsDirectory}/js/*.tgz -C ${REPO_TEMP_DIRECTORY}`,
        }, {
            name: `Move build artifact out of the way`,
            run: `mv ${this.artifactsDirectory} ${BUILD_ARTIFACT_OLD_DIR}`,
        }, {
            name: `Create ${target} artifact`,
            run: `cd ${REPO_TEMP_DIRECTORY} && ${this.runTaskCommand(packTask)}`,
        }, {
            name: `Collect ${target} artifact`,
            run: `mv ${REPO_TEMP_DIRECTORY}/${this.artifactsDirectory} ${this.artifactsDirectory}`,
        });
        return {
            publishTools: consts_1.JSII_TOOLCHAIN[target],
            bootstrapSteps,
            packagingSteps,
        };
    }
    /**
     * Generates the runs-on config for Jobs.
     * Throws error if 'runsOn' and 'runsOnGroup' are both set.
     *
     * @param options - 'runsOn' or 'runsOnGroup'.
     */
    getJobRunsOnConfig(options) {
        return options.workflowRunsOnGroup
            ? { runsOnGroup: options.workflowRunsOnGroup }
            : options.workflowRunsOn
                ? { runsOn: options.workflowRunsOn }
                : {};
    }
}
exports.JsiiProject = JsiiProject;
_a = JSII_RTTI_SYMBOL_1;
JsiiProject[_a] = { fqn: "projen.cdk.JsiiProject", version: "0.88.0" };
const publishTo = {
    js: "publishToNpm",
    java: "publishToMaven",
    python: "publishToPyPi",
    dotnet: "publishToNuget",
    go: "publishToGo",
};
function parseAuthorAddress(options) {
    let authorEmail = options.authorEmail;
    let authorUrl = options.authorUrl;
    if (options.authorAddress) {
        if (options.authorEmail && options.authorEmail !== options.authorAddress) {
            throw new Error("authorEmail is deprecated and cannot be used in conjunction with authorAddress");
        }
        if (options.authorUrl && options.authorUrl !== options.authorAddress) {
            throw new Error("authorUrl is deprecated and cannot be used in conjunction with authorAddress.");
        }
        if (EMAIL_REGEX.test(options.authorAddress)) {
            authorEmail = options.authorAddress;
        }
        else if (URL_REGEX.test(options.authorAddress)) {
            authorUrl = options.authorAddress;
        }
        else {
            throw new Error(`authorAddress must be either an email address or a URL: ${options.authorAddress}`);
        }
    }
    return { authorEmail, authorUrl };
}
//# sourceMappingURL=data:application/json;base64,
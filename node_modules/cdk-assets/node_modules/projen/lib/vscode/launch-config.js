"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VsCodeLaunchConfig = exports.InternalConsoleOptions = exports.Console = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("../component");
const json_1 = require("../json");
/**
 * Controls where to launch the debug target
 * Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes
 */
var Console;
(function (Console) {
    Console["INTERNAL_CONSOLE"] = "internalConsole";
    Console["INTEGRATED_TERMINAL"] = "integratedTerminal";
    Console["EXTERNAL_TERMINAL"] = "externalTerminal";
})(Console || (exports.Console = Console = {}));
/**
 * Controls the visibility of the VSCode Debug Console panel during a debugging session
 * Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes
 */
var InternalConsoleOptions;
(function (InternalConsoleOptions) {
    InternalConsoleOptions["NEVER_OPEN"] = "neverOpen";
    InternalConsoleOptions["OPEN_ON_FIRST_SESSION_START"] = "openOnFirstSessionStart";
    InternalConsoleOptions["OPEN_ON_SESSION_START"] = "openOnSessionStart";
})(InternalConsoleOptions || (exports.InternalConsoleOptions = InternalConsoleOptions = {}));
/**
 * VSCode launch configuration file (launch.json), useful for enabling in-editor debugger
 */
class VsCodeLaunchConfig extends component_1.Component {
    static renderLaunchConfig(cfg) {
        if (!cfg.env) {
            return cfg;
        }
        return {
            ...cfg,
            env: Object.fromEntries(Object.entries(cfg.env).map(([key, value]) => [
                key,
                value === false ? null : value,
            ])),
        };
    }
    constructor(vscode) {
        super(vscode.project);
        this.content = {
            version: "0.2.0",
            configurations: [],
        };
        this.file = new json_1.JsonFile(vscode.project, ".vscode/launch.json", {
            obj: () => ({
                ...this.content,
                configurations: this.content.configurations.map(VsCodeLaunchConfig.renderLaunchConfig),
            }),
        });
    }
    /**
     * Adds a VsCodeLaunchConfigurationEntry (e.g. a node.js debugger) to `.vscode/launch.json.
     * Each configuration entry has following mandatory fields: type, request and name.
     * See https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes for details.
     * @param cfg VsCodeLaunchConfigurationEntry
     */
    addConfiguration(cfg) {
        this.content.configurations.push(cfg);
    }
    /**
     * Adds an input variable with type `promptString` to `.vscode/launch.json`.
     *
     * See https://code.visualstudio.com/docs/editor/variables-reference#_input-variables for details.
     * @param cfg VsCodeLaunchPromptStringInputEntry
     */
    addPromptStringInput(cfg) {
        this.addInput({
            ...cfg,
            type: InputCommandType.PROMPT_STRING,
        });
    }
    /**
     * Adds an input variable with type `pickString` to `.vscode/launch.json`.
     *
     * See https://code.visualstudio.com/docs/editor/variables-reference#_input-variables for details.
     * @param cfg VsCodeLaunchPickStringInputEntry
     */
    addPickStringInput(cfg) {
        this.addInput({
            ...cfg,
            type: InputCommandType.PICK_STRING,
        });
    }
    /**
     * Adds an input variable with type `command` to `.vscode/launch.json`.
     *
     * See https://code.visualstudio.com/docs/editor/variables-reference#_input-variables for details.
     * @param cfg VsCodeLaunchCommandInputEntry
     */
    addCommandInput(cfg) {
        this.addInput({
            ...cfg,
            type: InputCommandType.COMMAND,
        });
    }
    addInput(input) {
        var _b;
        (_b = this.content).inputs ?? (_b.inputs = []);
        this.content.inputs.push(input);
    }
}
exports.VsCodeLaunchConfig = VsCodeLaunchConfig;
_a = JSII_RTTI_SYMBOL_1;
VsCodeLaunchConfig[_a] = { fqn: "projen.vscode.VsCodeLaunchConfig", version: "0.88.0" };
var InputCommandType;
(function (InputCommandType) {
    InputCommandType["PROMPT_STRING"] = "promptString";
    InputCommandType["PICK_STRING"] = "pickString";
    InputCommandType["COMMAND"] = "command";
})(InputCommandType || (InputCommandType = {}));
//# sourceMappingURL=data:application/json;base64,
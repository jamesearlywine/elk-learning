"use strict";
// @see https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppPermission = exports.JobPermission = void 0;
/**
 * Access level for workflow permission scopes.
 */
var JobPermission;
(function (JobPermission) {
    /** Read-only access */
    JobPermission["READ"] = "read";
    /** Read-write access */
    JobPermission["WRITE"] = "write";
    /** No access at all */
    JobPermission["NONE"] = "none";
})(JobPermission || (exports.JobPermission = JobPermission = {}));
/**
 * The permissions available for an access token for a GitHub App.
 */
var AppPermission;
(function (AppPermission) {
    /** Read-only acccess */
    AppPermission["READ"] = "read";
    /** Read-write access */
    AppPermission["WRITE"] = "write";
    /**
     * Read-write and admin access.
     *
     * Not all permissions support `admin`.
     */
    AppPermission["ADMIN"] = "admin";
})(AppPermission || (exports.AppPermission = AppPermission = {}));
//#endregion
//# sourceMappingURL=data:application/json;base64,
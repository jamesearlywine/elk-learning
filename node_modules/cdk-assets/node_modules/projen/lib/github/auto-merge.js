"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoMerge = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("../component");
/**
 * Sets up mergify to merging approved pull requests.
 *
 * If `buildJob` is specified, the specified GitHub workflow job ID is required
 * to succeed in order for the PR to be merged.
 *
 * `approvedReviews` specified the number of code review approvals required for
 * the PR to be merged.
 */
class AutoMerge extends component_1.Component {
    constructor(github, options = {}) {
        super(github.project);
        this.lazyConditions = new Array();
        const mergify = github.mergify;
        if (!mergify) {
            throw new Error("auto merging requires mergify to be enabled");
        }
        const blockingLabels = options.blockingLabels ?? ["do-not-merge"];
        const blockingCondition = blockingLabels?.length
            ? [`-label~=(${blockingLabels.join("|")})`]
            : [];
        const mergeAction = {
            delete_head_branch: {},
            queue: {
                // squash all commits into a single commit when merging
                // method: "squash",
                method: "squash",
                name: "default",
                // use PR title+body as the commit message
                commit_message_template: [
                    "{{ title }} (#{{ number }})",
                    "",
                    "{{ body }}",
                ].join("\n"),
            },
        };
        const approvedReviews = options.approvedReviews ?? 1;
        // add initial conditions (additional conditions can be added later)
        this.addConditions(`#approved-reviews-by>=${approvedReviews}`);
        this.addConditions(...blockingCondition);
        const ruleName = options.ruleName ?? "Automatic merge on approval and successful build";
        const queueName = options.queueName ?? "default";
        mergify.addRule({
            name: ruleName,
            actions: mergeAction,
            conditions: (() => this.renderConditions()),
        });
        mergify.addQueue({
            name: queueName,
            updateMethod: "merge",
            conditions: (() => this.renderConditions()),
        });
        this.project.addPackageIgnore("/.mergify.yml");
    }
    /**
     * Adds conditions to the auto merge rule.
     * @param conditions The conditions to add (mergify syntax)
     */
    addConditions(...conditions) {
        this.addConditionsLater({ render: () => conditions });
    }
    /**
     * Adds conditions that will be rendered only during synthesis.
     * @param later The later
     */
    addConditionsLater(later) {
        this.lazyConditions.push(later);
    }
    renderConditions() {
        const output = new Array();
        for (const later of this.lazyConditions) {
            output.push(...later.render());
        }
        return output;
    }
}
exports.AutoMerge = AutoMerge;
_a = JSII_RTTI_SYMBOL_1;
AutoMerge[_a] = { fqn: "projen.github.AutoMerge", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1tZXJnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9naXRodWIvYXV0by1tZXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDRDQUF5QztBQTRCekM7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFhLFNBQVUsU0FBUSxxQkFBUztJQUd0QyxZQUFZLE1BQWMsRUFBRSxVQUE0QixFQUFFO1FBQ3hELEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFIUCxtQkFBYyxHQUFHLElBQUksS0FBSyxFQUF1QixDQUFDO1FBS2pFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1FBQ2pFLENBQUM7UUFFRCxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsY0FBYyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbEUsTUFBTSxpQkFBaUIsR0FBRyxjQUFjLEVBQUUsTUFBTTtZQUM5QyxDQUFDLENBQUMsQ0FBQyxZQUFZLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUMzQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRVAsTUFBTSxXQUFXLEdBQUc7WUFDbEIsa0JBQWtCLEVBQUUsRUFBRTtZQUV0QixLQUFLLEVBQUU7Z0JBQ0wsdURBQXVEO2dCQUN2RCxvQkFBb0I7Z0JBQ3BCLE1BQU0sRUFBRSxRQUFRO2dCQUNoQixJQUFJLEVBQUUsU0FBUztnQkFDZiwwQ0FBMEM7Z0JBQzFDLHVCQUF1QixFQUFFO29CQUN2Qiw2QkFBNkI7b0JBQzdCLEVBQUU7b0JBQ0YsWUFBWTtpQkFDYixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDYjtTQUNGLENBQUM7UUFFRixNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxJQUFJLENBQUMsQ0FBQztRQUVyRCxvRUFBb0U7UUFDcEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztRQUV6QyxNQUFNLFFBQVEsR0FDWixPQUFPLENBQUMsUUFBUSxJQUFJLGtEQUFrRCxDQUFDO1FBQ3pFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDO1FBRWpELE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDZCxJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFRO1NBQ25ELENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDZixJQUFJLEVBQUUsU0FBUztZQUNmLFlBQVksRUFBRSxPQUFPO1lBQ3JCLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFRO1NBQ25ELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGFBQWEsQ0FBQyxHQUFHLFVBQW9CO1FBQzFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7O09BR0c7SUFDSSxrQkFBa0IsQ0FBQyxLQUEwQjtRQUNsRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFFbkMsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQWxGSCw4QkFtRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHaXRIdWIgfSBmcm9tIFwiLi9naXRodWJcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBBdXRvTWVyZ2VPcHRpb25zIHtcbiAgLyoqXG4gICAqIE51bWJlciBvZiBhcHByb3ZlZCBjb2RlIHJldmlld3MuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHJlYWRvbmx5IGFwcHJvdmVkUmV2aWV3cz86IG51bWJlcjtcblxuICAvKipcbiAgICogTGlzdCBvZiBsYWJlbHMgdGhhdCB3aWxsIHByZXZlbnQgYXV0by1tZXJnaW5nLlxuICAgKiBAZGVmYXVsdCBbJ2RvLW5vdC1tZXJnZSddXG4gICAqL1xuICByZWFkb25seSBibG9ja2luZ0xhYmVscz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBtZXJnaWZ5IHJ1bGVcbiAgICogQGRlZmF1bHQgJ0F1dG9tYXRpYyBtZXJnZSBvbiBhcHByb3ZhbCBhbmQgc3VjY2Vzc2Z1bCBidWlsZCdcbiAgICovXG4gIHJlYWRvbmx5IHJ1bGVOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBtZXJnaWZ5IHF1ZXVlXG4gICAqIEBkZWZhdWx0ICdkZWZhdWx0J1xuICAgKi9cbiAgcmVhZG9ubHkgcXVldWVOYW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFNldHMgdXAgbWVyZ2lmeSB0byBtZXJnaW5nIGFwcHJvdmVkIHB1bGwgcmVxdWVzdHMuXG4gKlxuICogSWYgYGJ1aWxkSm9iYCBpcyBzcGVjaWZpZWQsIHRoZSBzcGVjaWZpZWQgR2l0SHViIHdvcmtmbG93IGpvYiBJRCBpcyByZXF1aXJlZFxuICogdG8gc3VjY2VlZCBpbiBvcmRlciBmb3IgdGhlIFBSIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBgYXBwcm92ZWRSZXZpZXdzYCBzcGVjaWZpZWQgdGhlIG51bWJlciBvZiBjb2RlIHJldmlldyBhcHByb3ZhbHMgcmVxdWlyZWQgZm9yXG4gKiB0aGUgUFIgdG8gYmUgbWVyZ2VkLlxuICovXG5leHBvcnQgY2xhc3MgQXV0b01lcmdlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBsYXp5Q29uZGl0aW9ucyA9IG5ldyBBcnJheTxJQWRkQ29uZGl0aW9uc0xhdGVyPigpO1xuXG4gIGNvbnN0cnVjdG9yKGdpdGh1YjogR2l0SHViLCBvcHRpb25zOiBBdXRvTWVyZ2VPcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihnaXRodWIucHJvamVjdCk7XG5cbiAgICBjb25zdCBtZXJnaWZ5ID0gZ2l0aHViLm1lcmdpZnk7XG4gICAgaWYgKCFtZXJnaWZ5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhdXRvIG1lcmdpbmcgcmVxdWlyZXMgbWVyZ2lmeSB0byBiZSBlbmFibGVkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGJsb2NraW5nTGFiZWxzID0gb3B0aW9ucy5ibG9ja2luZ0xhYmVscyA/PyBbXCJkby1ub3QtbWVyZ2VcIl07XG4gICAgY29uc3QgYmxvY2tpbmdDb25kaXRpb24gPSBibG9ja2luZ0xhYmVscz8ubGVuZ3RoXG4gICAgICA/IFtgLWxhYmVsfj0oJHtibG9ja2luZ0xhYmVscy5qb2luKFwifFwiKX0pYF1cbiAgICAgIDogW107XG5cbiAgICBjb25zdCBtZXJnZUFjdGlvbiA9IHtcbiAgICAgIGRlbGV0ZV9oZWFkX2JyYW5jaDoge30sXG5cbiAgICAgIHF1ZXVlOiB7XG4gICAgICAgIC8vIHNxdWFzaCBhbGwgY29tbWl0cyBpbnRvIGEgc2luZ2xlIGNvbW1pdCB3aGVuIG1lcmdpbmdcbiAgICAgICAgLy8gbWV0aG9kOiBcInNxdWFzaFwiLFxuICAgICAgICBtZXRob2Q6IFwic3F1YXNoXCIsXG4gICAgICAgIG5hbWU6IFwiZGVmYXVsdFwiLFxuICAgICAgICAvLyB1c2UgUFIgdGl0bGUrYm9keSBhcyB0aGUgY29tbWl0IG1lc3NhZ2VcbiAgICAgICAgY29tbWl0X21lc3NhZ2VfdGVtcGxhdGU6IFtcbiAgICAgICAgICBcInt7IHRpdGxlIH19ICgje3sgbnVtYmVyIH19KVwiLFxuICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgXCJ7eyBib2R5IH19XCIsXG4gICAgICAgIF0uam9pbihcIlxcblwiKSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IGFwcHJvdmVkUmV2aWV3cyA9IG9wdGlvbnMuYXBwcm92ZWRSZXZpZXdzID8/IDE7XG5cbiAgICAvLyBhZGQgaW5pdGlhbCBjb25kaXRpb25zIChhZGRpdGlvbmFsIGNvbmRpdGlvbnMgY2FuIGJlIGFkZGVkIGxhdGVyKVxuICAgIHRoaXMuYWRkQ29uZGl0aW9ucyhgI2FwcHJvdmVkLXJldmlld3MtYnk+PSR7YXBwcm92ZWRSZXZpZXdzfWApO1xuICAgIHRoaXMuYWRkQ29uZGl0aW9ucyguLi5ibG9ja2luZ0NvbmRpdGlvbik7XG5cbiAgICBjb25zdCBydWxlTmFtZSA9XG4gICAgICBvcHRpb25zLnJ1bGVOYW1lID8/IFwiQXV0b21hdGljIG1lcmdlIG9uIGFwcHJvdmFsIGFuZCBzdWNjZXNzZnVsIGJ1aWxkXCI7XG4gICAgY29uc3QgcXVldWVOYW1lID0gb3B0aW9ucy5xdWV1ZU5hbWUgPz8gXCJkZWZhdWx0XCI7XG5cbiAgICBtZXJnaWZ5LmFkZFJ1bGUoe1xuICAgICAgbmFtZTogcnVsZU5hbWUsXG4gICAgICBhY3Rpb25zOiBtZXJnZUFjdGlvbixcbiAgICAgIGNvbmRpdGlvbnM6ICgoKSA9PiB0aGlzLnJlbmRlckNvbmRpdGlvbnMoKSkgYXMgYW55LFxuICAgIH0pO1xuXG4gICAgbWVyZ2lmeS5hZGRRdWV1ZSh7XG4gICAgICBuYW1lOiBxdWV1ZU5hbWUsXG4gICAgICB1cGRhdGVNZXRob2Q6IFwibWVyZ2VcIixcbiAgICAgIGNvbmRpdGlvbnM6ICgoKSA9PiB0aGlzLnJlbmRlckNvbmRpdGlvbnMoKSkgYXMgYW55LFxuICAgIH0pO1xuXG4gICAgdGhpcy5wcm9qZWN0LmFkZFBhY2thZ2VJZ25vcmUoXCIvLm1lcmdpZnkueW1sXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgY29uZGl0aW9ucyB0byB0aGUgYXV0byBtZXJnZSBydWxlLlxuICAgKiBAcGFyYW0gY29uZGl0aW9ucyBUaGUgY29uZGl0aW9ucyB0byBhZGQgKG1lcmdpZnkgc3ludGF4KVxuICAgKi9cbiAgcHVibGljIGFkZENvbmRpdGlvbnMoLi4uY29uZGl0aW9uczogc3RyaW5nW10pIHtcbiAgICB0aGlzLmFkZENvbmRpdGlvbnNMYXRlcih7IHJlbmRlcjogKCkgPT4gY29uZGl0aW9ucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGNvbmRpdGlvbnMgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIG9ubHkgZHVyaW5nIHN5bnRoZXNpcy5cbiAgICogQHBhcmFtIGxhdGVyIFRoZSBsYXRlclxuICAgKi9cbiAgcHVibGljIGFkZENvbmRpdGlvbnNMYXRlcihsYXRlcjogSUFkZENvbmRpdGlvbnNMYXRlcikge1xuICAgIHRoaXMubGF6eUNvbmRpdGlvbnMucHVzaChsYXRlcik7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckNvbmRpdGlvbnMoKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gbmV3IEFycmF5PHN0cmluZz4oKTtcblxuICAgIGZvciAoY29uc3QgbGF0ZXIgb2YgdGhpcy5sYXp5Q29uZGl0aW9ucykge1xuICAgICAgb3V0cHV0LnB1c2goLi4ubGF0ZXIucmVuZGVyKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQWRkQ29uZGl0aW9uc0xhdGVyIHtcbiAgcmVuZGVyKCk6IHN0cmluZ1tdO1xufVxuIl19
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskWorkflowJob = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("./constants");
const workflow_steps_1 = require("./workflow-steps");
const component_1 = require("../component");
const runner_options_1 = require("../runner-options");
const util_1 = require("./private/util");
/**
 * The primary or initial job of a TaskWorkflow.
 *
 * @implements {Job}
 */
class TaskWorkflowJob extends component_1.Component {
    /**
     * @param scope should be part of the project the Task belongs to.
     * @param task the main task that is run as part of this job.
     * @param options options to configure the TaskWorkflowJob.
     */
    constructor(scope, task, options) {
        super(scope, `${new.target.name}#${task.name}`);
        const preCheckoutSteps = options.preCheckoutSteps ?? [];
        const checkoutWith = {};
        if (options.downloadLfs) {
            checkoutWith.lfs = true;
        }
        // 'checkoutWith' can override 'lfs'
        Object.assign(checkoutWith, options.checkoutWith ?? {});
        const preBuildSteps = options.preBuildSteps ?? [];
        const postBuildSteps = options.postBuildSteps ?? [];
        const gitIdentity = options.gitIdentity ?? constants_1.DEFAULT_GITHUB_ACTIONS_USER;
        if (options.artifactsDirectory) {
            (0, util_1.ensureNotHiddenPath)(options.artifactsDirectory, "artifactsDirectory");
            postBuildSteps.push(workflow_steps_1.WorkflowSteps.uploadArtifact({
                // Setting to always will ensure that this step will run even if
                // the previous ones have failed (e.g. coverage report, internal logs, etc)
                if: "always()",
                with: {
                    name: options.artifactsDirectory,
                    path: options.artifactsDirectory,
                },
            }));
        }
        const runsOnInputs = (0, runner_options_1.filteredRunsOnOptions)(options.runsOn, options.runsOnGroup);
        this.runsOn = runsOnInputs?.runsOn;
        this.runsOnGroup = runsOnInputs?.runsOnGroup;
        this.container = options.container;
        this.env = options.env;
        this.permissions = options.permissions;
        this.defaults = options?.jobDefaults;
        this.if = options.condition;
        this.outputs = options.outputs;
        this.steps = [
            ...preCheckoutSteps,
            // check out sources.
            workflow_steps_1.WorkflowSteps.checkout({ with: checkoutWith }),
            // sets git identity so we can push later
            workflow_steps_1.WorkflowSteps.setupGitIdentity({ gitIdentity }),
            ...preBuildSteps,
            // run the main build task
            {
                name: task.name,
                run: this.project.runTaskCommand(task),
            },
            ...postBuildSteps,
        ];
    }
    /**
     * @jsii ignore
     * @internal
     */
    toJSON() {
        return {
            runsOn: this.runsOn,
            runsOnGroup: this.runsOnGroup,
            steps: this.steps,
            environment: this.environment,
            outputs: this.outputs,
            env: this.env,
            defaults: this.defaults,
            timeoutMinutes: this.timeoutMinutes,
            continueOnError: this.continueOnError,
            container: this.container,
            services: this.services,
            tools: this.tools,
            name: this.name,
            needs: this.needs,
            permissions: this.permissions,
            concurrency: this.concurrency,
            if: this.if,
            strategy: this.strategy,
        };
    }
}
exports.TaskWorkflowJob = TaskWorkflowJob;
_a = JSII_RTTI_SYMBOL_1;
TaskWorkflowJob[_a] = { fqn: "projen.github.TaskWorkflowJob", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
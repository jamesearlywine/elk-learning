"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowSteps = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const object_1 = require("../util/object");
/**
 * A collection of very commonly used, individual, GitHub Workflow Job steps.
 */
class WorkflowSteps {
    /**
     * Checks out a repository.
     *
     * @param options Options to configure the `checkout` JobStep
     * @returns A JobStep that checks out a repository
     */
    static checkout(options = {}) {
        const checkoutWith = (0, object_1.removeNullOrUndefinedProperties)({
            "fetch-depth": options?.with?.fetchDepth,
            token: options?.with?.token,
            ref: options?.with?.ref,
            repository: options?.with?.repository,
            path: options?.with?.path,
            ...(options?.with?.lfs ? { lfs: true } : {}),
        });
        return {
            ...this.buildJobStepConfig({
                ...options,
                name: options.name ?? "Checkout",
            }),
            uses: "actions/checkout@v4",
            with: Object.keys(checkoutWith).length > 0 ? checkoutWith : undefined,
        };
    }
    /**
     * Configures the git identity (user name and email).
     *
     * @param options Options to configure the git identity JobStep
     * @returns Job step that configures the provided git identity
     */
    static setupGitIdentity(options) {
        return {
            ...this.buildJobStepConfig({
                ...options,
                name: options.name ?? "Set git identity",
            }),
            run: [
                `git config user.name "${options.gitIdentity.name}"`,
                `git config user.email "${options.gitIdentity.email}"`,
            ].join("\n"),
        };
    }
    /**
     * Checks if a tag exists.
     *
     * Requires a checkout step to have been run before this step with "fetch-depth" set to "0".
     *
     * Outputs:
     * - `exists`: A string value of 'true' or 'false' indicating if the tag exists.
     *
     * @param tag The tag to check. You may use valid bash code instead of a literal string in this field.
     * @param options Options to configure the `tag-exists` JobStep
     * @returns Job step that checks if the provided tag exists
     */
    static tagExists(tag, options) {
        const checkTag = (remoteTag) => `git ls-remote -q --exit-code --tags origin ${remoteTag}`;
        const varIsSet = (variable) => `[ ! -z "$${variable}" ]`;
        const setOutput = (value) => `(echo "exists=${value ? "true" : "false"}" >> $GITHUB_OUTPUT)`;
        return {
            ...this.buildJobStepConfig({
                ...options,
                name: options.name ?? "Check if tag exists",
                id: options.id ?? "check-tag",
            }),
            run: [
                `TAG=${tag}`,
                `(${varIsSet("TAG")} && ${checkTag("$TAG")} && ${setOutput(true)}) || ${setOutput(false)}`,
                "cat $GITHUB_OUTPUT",
            ].join("\n"),
        };
    }
    /**
     * Uploads an artifact.
     *
     * @param options Options to configure the `upload-artifact` JobStep
     * @returns A JobStep that uploads an artifact
     */
    static uploadArtifact(options) {
        const uploadArtifactWith = (0, object_1.removeNullOrUndefinedProperties)({
            name: options?.with?.name,
            path: options?.with?.path,
            overwrite: options?.with?.overwrite ?? true,
            "if-no-files-found": options?.with?.ifNoFilesFound,
            "retention-days": options?.with?.retentionDays,
            "compression-level": options?.with?.compressionLevel,
            "include-hidden-files": options?.with?.includeHiddenFiles,
        });
        return {
            ...this.buildJobStepConfig({
                ...options,
                name: options.name ?? "Upload artifact",
            }),
            uses: "actions/upload-artifact@v4.4.0",
            with: uploadArtifactWith,
        };
    }
    /**
     * Downloads an artifact.
     *
     * @param options Options to configure the `download-artifact` JobStep
     * @returns A JobStep that downloads an artifact
     */
    static downloadArtifact(options) {
        const downloadArtifactWith = options?.with
            ? (0, object_1.removeNullOrUndefinedProperties)({
                name: options?.with?.name,
                path: options?.with?.path,
                pattern: options?.with?.pattern,
                repository: options?.with?.repository,
                "merge-multiple": options?.with?.mergeMultiple,
                "github-token": options?.with?.token,
                "run-id": options?.with?.runId,
            })
            : undefined;
        return {
            ...this.buildJobStepConfig({
                ...options,
                name: options?.name ?? "Download artifact",
            }),
            uses: "actions/download-artifact@v4",
            with: downloadArtifactWith,
        };
    }
    /**
     * Simple adapter to ensure we only include the necessary fields for a JobStepConfiguration.
     */
    static buildJobStepConfig(options) {
        return {
            continueOnError: options?.continueOnError,
            env: options?.env,
            id: options?.id,
            if: options?.if,
            name: options?.name,
            timeoutMinutes: options?.timeoutMinutes,
            workingDirectory: options?.workingDirectory,
        };
    }
}
exports.WorkflowSteps = WorkflowSteps;
_a = JSII_RTTI_SYMBOL_1;
WorkflowSteps[_a] = { fqn: "projen.github.WorkflowSteps", version: "0.88.0" };
//# sourceMappingURL=data:application/json;base64,
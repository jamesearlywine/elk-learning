"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PullRequestLint = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const _1 = require(".");
const workflows_model_1 = require("./workflows-model");
const component_1 = require("../component");
const runner_options_1 = require("../runner-options");
/**
 * Configure validations to run on GitHub pull requests.
 * Only generates a file if at least one linter is configured.
 */
class PullRequestLint extends component_1.Component {
    constructor(github, options = {}) {
        super(github.project);
        this.github = github;
        this.options = options;
        const checkSemanticTitle = options.semanticTitle ?? true;
        const checkContributorStatement = Boolean(options.contributorStatement);
        // should only create a workflow if one or more linters are enabled
        if (!checkSemanticTitle && !checkContributorStatement) {
            return;
        }
        const workflow = github.addWorkflow("pull-request-lint");
        workflow.on({
            pullRequestTarget: {
                types: [
                    "labeled",
                    "opened",
                    "synchronize",
                    "reopened",
                    "ready_for_review",
                    "edited",
                ],
            },
        });
        if (checkSemanticTitle) {
            const opts = options.semanticTitleOptions ?? {};
            const types = opts.types ?? ["feat", "fix", "chore"];
            const validateJob = {
                name: "Validate PR title",
                ...(0, runner_options_1.filteredRunsOnOptions)(options.runsOn, options.runsOnGroup),
                permissions: {
                    pullRequests: workflows_model_1.JobPermission.WRITE,
                },
                steps: [
                    {
                        uses: "amannn/action-semantic-pull-request@v5.4.0",
                        env: {
                            GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}",
                        },
                        with: {
                            types: types.join("\n"),
                            requireScope: opts.requireScope ?? false,
                        },
                    },
                ],
            };
            workflow.addJobs({ validate: validateJob });
        }
        if (options.contributorStatement) {
            const opts = options.contributorStatementOptions ?? {};
            const users = opts.exemptUsers ?? [];
            const labels = opts.exemptLabels ?? [];
            const conditions = [
                ...labels.map((l) => `contains(github.event.pull_request.labels.*.name, '${l}')`),
                ...users.map((u) => `github.event.pull_request.user.login == '${u}'`),
            ];
            const script = (core) => {
                const actual = process.env.PR_BODY.replace(/\r?\n/g, "\n");
                const expected = process.env.EXPECTED.replace(/\r?\n/g, "\n");
                if (!actual.includes(expected)) {
                    console.log("%j", actual);
                    console.log("%j", expected);
                    core.setFailed(`${process.env.HELP}: ${expected}`);
                }
            };
            const helpMessage = "Contributor statement missing from PR description. Please include the following text in the PR description";
            const contributorStatement = {
                name: "Require Contributor Statement",
                runsOn: options.runsOn ?? ["ubuntu-latest"],
                permissions: {
                    pullRequests: workflows_model_1.JobPermission.READ,
                },
                if: conditions.length ? `!(${conditions.join(" || ")})` : undefined,
                env: {
                    PR_BODY: "${{ github.event.pull_request.body }}",
                    EXPECTED: options.contributorStatement,
                    HELP: helpMessage,
                },
                steps: [
                    {
                        uses: "actions/github-script@v6",
                        with: {
                            script: fnBody(script),
                        },
                    },
                ],
            };
            workflow.addJobs({ contributorStatement });
        }
    }
    preSynthesize() {
        if (this.options.contributorStatement) {
            // Append to PR template in preSynthesize so it's always at the end of the file
            const prTemplate = _1.PullRequestTemplate.of(this.project) ??
                this.github.addPullRequestTemplate();
            prTemplate?.addLine("");
            prTemplate?.addLine("---");
            prTemplate?.addLine(this.options.contributorStatement);
            prTemplate?.addLine("");
        }
    }
}
exports.PullRequestLint = PullRequestLint;
_a = JSII_RTTI_SYMBOL_1;
PullRequestLint[_a] = { fqn: "projen.github.PullRequestLint", version: "0.88.0" };
/**
 * Helper to generate a JS script as string from a function object
 * @returns A prettified string of the function's body
 */
function fnBody(fn) {
    const def = fn.toString().replace(/\r?\n/g, "\n");
    const body = def
        .substring(def.indexOf("{") + 1, def.lastIndexOf("}"))
        .split("\n");
    const minIndentation = Math.min(...body
        .filter((l) => l.trim()) // ignore empty lines
        .map((l) => l.search(/\S|$/)));
    return body
        .map((l) => l.replace(" ".repeat(minIndentation), ""))
        .join("\n")
        .trim();
}
//# sourceMappingURL=data:application/json;base64,
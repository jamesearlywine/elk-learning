"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerImageAssetHandler = void 0;
const path = require("path");
const _1 = require(".");
const progress_1 = require("../../progress");
const placeholders_1 = require("../placeholders");
const shell_1 = require("../shell");
class ContainerImageAssetHandler {
    constructor(workDir, asset, host, options) {
        this.workDir = workDir;
        this.asset = asset;
        this.host = host;
        this.options = options;
    }
    async build() {
        const initOnce = await this.initOnce();
        if (initOnce.destinationAlreadyExists) {
            return;
        }
        if (this.host.aborted) {
            return;
        }
        const dockerForBuilding = await this.host.dockerFactory.forBuild({
            repoUri: initOnce.repoUri,
            logger: (m) => this.host.emitMessage(progress_1.EventType.DEBUG, m),
            ecr: initOnce.ecr,
        });
        const builder = new ContainerImageBuilder(dockerForBuilding, this.workDir, this.asset, this.host, {
            quiet: this.options.quiet,
        });
        const localTagName = await builder.build();
        if (localTagName === undefined || this.host.aborted) {
            return;
        }
        if (this.host.aborted) {
            return;
        }
        await dockerForBuilding.tag(localTagName, initOnce.imageUri);
    }
    async isPublished() {
        try {
            const initOnce = await this.initOnce({ quiet: true });
            return initOnce.destinationAlreadyExists;
        }
        catch (e) {
            this.host.emitMessage(progress_1.EventType.DEBUG, `${e.message}`);
        }
        return false;
    }
    async publish() {
        const initOnce = await this.initOnce();
        if (initOnce.destinationAlreadyExists) {
            return;
        }
        if (this.host.aborted) {
            return;
        }
        const dockerForPushing = await this.host.dockerFactory.forEcrPush({
            repoUri: initOnce.repoUri,
            logger: (m) => this.host.emitMessage(progress_1.EventType.DEBUG, m),
            ecr: initOnce.ecr,
        });
        if (this.host.aborted) {
            return;
        }
        this.host.emitMessage(progress_1.EventType.UPLOAD, `Push ${initOnce.imageUri}`);
        await dockerForPushing.push({ tag: initOnce.imageUri, quiet: this.options.quiet });
    }
    async initOnce(options = {}) {
        if (this.init) {
            return this.init;
        }
        const destination = await (0, placeholders_1.replaceAwsPlaceholders)(this.asset.destination, this.host.aws);
        const ecr = await this.host.aws.ecrClient({
            ...(0, _1.destinationToClientOptions)(destination),
            quiet: options.quiet,
        });
        const account = async () => (await this.host.aws.discoverCurrentAccount())?.accountId;
        const repoUri = await repositoryUri(ecr, destination.repositoryName);
        if (!repoUri) {
            throw new Error(`No ECR repository named '${destination.repositoryName}' in account ${await account()}. Is this account bootstrapped?`);
        }
        const imageUri = `${repoUri}:${destination.imageTag}`;
        this.init = {
            imageUri,
            ecr,
            repoUri,
            destinationAlreadyExists: await this.destinationAlreadyExists(ecr, destination, imageUri),
        };
        return this.init;
    }
    /**
     * Check whether the image already exists in the ECR repo
     *
     * Use the fields from the destination to do the actual check. The imageUri
     * should correspond to that, but is only used to print Docker image location
     * for user benefit (the format is slightly different).
     */
    async destinationAlreadyExists(ecr, destination, imageUri) {
        this.host.emitMessage(progress_1.EventType.CHECK, `Check ${imageUri}`);
        if (await imageExists(ecr, destination.repositoryName, destination.imageTag)) {
            this.host.emitMessage(progress_1.EventType.FOUND, `Found ${imageUri}`);
            return true;
        }
        return false;
    }
}
exports.ContainerImageAssetHandler = ContainerImageAssetHandler;
class ContainerImageBuilder {
    constructor(docker, workDir, asset, host, options) {
        this.docker = docker;
        this.workDir = workDir;
        this.asset = asset;
        this.host = host;
        this.options = options;
    }
    async build() {
        return this.asset.source.executable
            ? this.buildExternalAsset(this.asset.source.executable)
            : this.buildDirectoryAsset();
    }
    /**
     * Build a (local) Docker asset from a directory with a Dockerfile
     *
     * Tags under a deterministic, unique, local identifier wich will skip
     * the build if it already exists.
     */
    async buildDirectoryAsset() {
        const localTagName = `cdkasset-${this.asset.id.assetId.toLowerCase()}`;
        if (!(await this.isImageCached(localTagName))) {
            if (this.host.aborted) {
                return undefined;
            }
            await this.buildImage(localTagName);
        }
        return localTagName;
    }
    /**
     * Build a (local) Docker asset by running an external command
     *
     * External command is responsible for deduplicating the build if possible,
     * and is expected to return the generated image identifier on stdout.
     */
    async buildExternalAsset(executable, cwd) {
        const assetPath = cwd ?? this.workDir;
        this.host.emitMessage(progress_1.EventType.BUILD, `Building Docker image using command '${executable}'`);
        if (this.host.aborted) {
            return undefined;
        }
        return (await (0, shell_1.shell)(executable, { cwd: assetPath, quiet: true })).trim();
    }
    async buildImage(localTagName) {
        const source = this.asset.source;
        if (!source.directory) {
            throw new Error(`'directory' is expected in the DockerImage asset source, got: ${JSON.stringify(source)}`);
        }
        const fullPath = path.resolve(this.workDir, source.directory);
        this.host.emitMessage(progress_1.EventType.BUILD, `Building Docker image at ${fullPath}`);
        await this.docker.build({
            directory: fullPath,
            tag: localTagName,
            buildArgs: source.dockerBuildArgs,
            buildSecrets: source.dockerBuildSecrets,
            buildSsh: source.dockerBuildSsh,
            target: source.dockerBuildTarget,
            file: source.dockerFile,
            networkMode: source.networkMode,
            platform: source.platform,
            outputs: source.dockerOutputs,
            cacheFrom: source.cacheFrom,
            cacheTo: source.cacheTo,
            cacheDisabled: source.cacheDisabled,
            quiet: this.options.quiet,
        });
    }
    async isImageCached(localTagName) {
        if (await this.docker.exists(localTagName)) {
            this.host.emitMessage(progress_1.EventType.CACHED, `Cached ${localTagName}`);
            return true;
        }
        return false;
    }
}
async function imageExists(ecr, repositoryName, imageTag) {
    try {
        await ecr.describeImages({ repositoryName, imageIds: [{ imageTag }] }).promise();
        return true;
    }
    catch (e) {
        if (e.code !== 'ImageNotFoundException') {
            throw e;
        }
        return false;
    }
}
/**
 * Return the URI for the repository with the given name
 *
 * Returns undefined if the repository does not exist.
 */
async function repositoryUri(ecr, repositoryName) {
    try {
        const response = await ecr
            .describeRepositories({ repositoryNames: [repositoryName] })
            .promise();
        return (response.repositories || [])[0]?.repositoryUri;
    }
    catch (e) {
        if (e.code !== 'RepositoryNotFoundException') {
            throw e;
        }
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,